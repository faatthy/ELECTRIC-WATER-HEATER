
Electric_Water_Heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  000035de  00003672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080016a  0080016a  0000377c  2**0
                  ALLOC
  3 .stab         00003cfc  00000000  00000000  0000377c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000199d  00000000  00000000  00007478  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00008e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00008f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00009168  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000b177  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000c2e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000d2e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000d488  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000d749  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dff7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__vector_1>
       8:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__vector_2>
       c:	0c 94 a0 0c 	jmp	0x1940	; 0x1940 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <main>
      8a:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 be 1a 	jmp	0x357c	; 0x357c <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 da 1a 	jmp	0x35b4	; 0x35b4 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <IIC_voidInit>:
#include "../../LIBRARY/errorState.h"
#include "IIC_priv.h"
#include"IIC_conf.h"
#include <util/delay.h>
void IIC_voidInit(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2e 97       	sbiw	r28, 0x0e	; 14
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61

	TWCR&=~(1<<2);
     cea:	a6 e5       	ldi	r26, 0x56	; 86
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e6 e5       	ldi	r30, 0x56	; 86
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8b 7f       	andi	r24, 0xFB	; 251
     cf6:	8c 93       	st	X, r24
	#if    I2C_MODE      ==   I2C_MASTER
	TWBR = 12;           // 400KHZ
     cf8:	e0 e2       	ldi	r30, 0x20	; 32
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	8c e0       	ldi	r24, 0x0C	; 12
     cfe:	80 83       	st	Z, r24
	#elif  I2C_MODE      ==   I2C_SLAVE
	TWAR = ((SLAVE_ADDRESS << 1) | GENERAL_CALL);
	#endif
	TWCR|=(1<<2);
     d00:	a6 e5       	ldi	r26, 0x56	; 86
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e6 e5       	ldi	r30, 0x56	; 86
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	84 60       	ori	r24, 0x04	; 4
     d0c:	8c 93       	st	X, r24
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	a0 e2       	ldi	r26, 0x20	; 32
     d14:	b1 e4       	ldi	r27, 0x41	; 65
     d16:	8b 87       	std	Y+11, r24	; 0x0b
     d18:	9c 87       	std	Y+12, r25	; 0x0c
     d1a:	ad 87       	std	Y+13, r26	; 0x0d
     d1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d20:	7c 85       	ldd	r23, Y+12	; 0x0c
     d22:	8d 85       	ldd	r24, Y+13	; 0x0d
     d24:	9e 85       	ldd	r25, Y+14	; 0x0e
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	4a e7       	ldi	r20, 0x7A	; 122
     d2c:	55 e4       	ldi	r21, 0x45	; 69
     d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	8f 83       	std	Y+7, r24	; 0x07
     d38:	98 87       	std	Y+8, r25	; 0x08
     d3a:	a9 87       	std	Y+9, r26	; 0x09
     d3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d3e:	6f 81       	ldd	r22, Y+7	; 0x07
     d40:	78 85       	ldd	r23, Y+8	; 0x08
     d42:	89 85       	ldd	r24, Y+9	; 0x09
     d44:	9a 85       	ldd	r25, Y+10	; 0x0a
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e8       	ldi	r20, 0x80	; 128
     d4c:	5f e3       	ldi	r21, 0x3F	; 63
     d4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d52:	88 23       	and	r24, r24
     d54:	2c f4       	brge	.+10     	; 0xd60 <IIC_voidInit+0x8a>
		__ticks = 1;
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	9e 83       	std	Y+6, r25	; 0x06
     d5c:	8d 83       	std	Y+5, r24	; 0x05
     d5e:	3f c0       	rjmp	.+126    	; 0xdde <IIC_voidInit+0x108>
	else if (__tmp > 65535)
     d60:	6f 81       	ldd	r22, Y+7	; 0x07
     d62:	78 85       	ldd	r23, Y+8	; 0x08
     d64:	89 85       	ldd	r24, Y+9	; 0x09
     d66:	9a 85       	ldd	r25, Y+10	; 0x0a
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	3f ef       	ldi	r19, 0xFF	; 255
     d6c:	4f e7       	ldi	r20, 0x7F	; 127
     d6e:	57 e4       	ldi	r21, 0x47	; 71
     d70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d74:	18 16       	cp	r1, r24
     d76:	4c f5       	brge	.+82     	; 0xdca <IIC_voidInit+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d78:	6b 85       	ldd	r22, Y+11	; 0x0b
     d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e2       	ldi	r20, 0x20	; 32
     d86:	51 e4       	ldi	r21, 0x41	; 65
     d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	bc 01       	movw	r22, r24
     d92:	cd 01       	movw	r24, r26
     d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	9e 83       	std	Y+6, r25	; 0x06
     d9e:	8d 83       	std	Y+5, r24	; 0x05
     da0:	0f c0       	rjmp	.+30     	; 0xdc0 <IIC_voidInit+0xea>
     da2:	80 e9       	ldi	r24, 0x90	; 144
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	9c 83       	std	Y+4, r25	; 0x04
     da8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	f1 f7       	brne	.-4      	; 0xdae <IIC_voidInit+0xd8>
     db2:	9c 83       	std	Y+4, r25	; 0x04
     db4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db6:	8d 81       	ldd	r24, Y+5	; 0x05
     db8:	9e 81       	ldd	r25, Y+6	; 0x06
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	9e 83       	std	Y+6, r25	; 0x06
     dbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
     dc2:	9e 81       	ldd	r25, Y+6	; 0x06
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	69 f7       	brne	.-38     	; 0xda2 <IIC_voidInit+0xcc>
     dc8:	14 c0       	rjmp	.+40     	; 0xdf2 <IIC_voidInit+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dca:	6f 81       	ldd	r22, Y+7	; 0x07
     dcc:	78 85       	ldd	r23, Y+8	; 0x08
     dce:	89 85       	ldd	r24, Y+9	; 0x09
     dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	9e 83       	std	Y+6, r25	; 0x06
     ddc:	8d 83       	std	Y+5, r24	; 0x05
     dde:	8d 81       	ldd	r24, Y+5	; 0x05
     de0:	9e 81       	ldd	r25, Y+6	; 0x06
     de2:	9a 83       	std	Y+2, r25	; 0x02
     de4:	89 83       	std	Y+1, r24	; 0x01
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	9a 81       	ldd	r25, Y+2	; 0x02
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <IIC_voidInit+0x114>
     dee:	9a 83       	std	Y+2, r25	; 0x02
     df0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	return;
}
     df2:	2e 96       	adiw	r28, 0x0e	; 14
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	08 95       	ret

00000e04 <IIC_voidStartCondition>:
void IIC_voidStartCondition(void)
{
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	2e 97       	sbiw	r28, 0x0e	; 14
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61

	TWCR|=(1<<5);
     e18:	a6 e5       	ldi	r26, 0x56	; 86
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e6 e5       	ldi	r30, 0x56	; 86
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	80 62       	ori	r24, 0x20	; 32
     e24:	8c 93       	st	X, r24
	TWCR|=(1<<7);
     e26:	a6 e5       	ldi	r26, 0x56	; 86
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e6 e5       	ldi	r30, 0x56	; 86
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	80 68       	ori	r24, 0x80	; 128
     e32:	8c 93       	st	X, r24
	while((TWCR>>7) == 0);
     e34:	e6 e5       	ldi	r30, 0x56	; 86
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	88 23       	and	r24, r24
     e3c:	dc f7       	brge	.-10     	; 0xe34 <IIC_voidStartCondition+0x30>
	while((TWSR & 0xF8) != START_CONDITION_TRANSMITTED);
     e3e:	e1 e2       	ldi	r30, 0x21	; 33
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	88 2f       	mov	r24, r24
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	88 7f       	andi	r24, 0xF8	; 248
     e4a:	90 70       	andi	r25, 0x00	; 0
     e4c:	88 30       	cpi	r24, 0x08	; 8
     e4e:	91 05       	cpc	r25, r1
     e50:	b1 f7       	brne	.-20     	; 0xe3e <IIC_voidStartCondition+0x3a>
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	a0 e2       	ldi	r26, 0x20	; 32
     e58:	b1 e4       	ldi	r27, 0x41	; 65
     e5a:	8b 87       	std	Y+11, r24	; 0x0b
     e5c:	9c 87       	std	Y+12, r25	; 0x0c
     e5e:	ad 87       	std	Y+13, r26	; 0x0d
     e60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e62:	6b 85       	ldd	r22, Y+11	; 0x0b
     e64:	7c 85       	ldd	r23, Y+12	; 0x0c
     e66:	8d 85       	ldd	r24, Y+13	; 0x0d
     e68:	9e 85       	ldd	r25, Y+14	; 0x0e
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	4a e7       	ldi	r20, 0x7A	; 122
     e70:	55 e4       	ldi	r21, 0x45	; 69
     e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	8f 83       	std	Y+7, r24	; 0x07
     e7c:	98 87       	std	Y+8, r25	; 0x08
     e7e:	a9 87       	std	Y+9, r26	; 0x09
     e80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e82:	6f 81       	ldd	r22, Y+7	; 0x07
     e84:	78 85       	ldd	r23, Y+8	; 0x08
     e86:	89 85       	ldd	r24, Y+9	; 0x09
     e88:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e8       	ldi	r20, 0x80	; 128
     e90:	5f e3       	ldi	r21, 0x3F	; 63
     e92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e96:	88 23       	and	r24, r24
     e98:	2c f4       	brge	.+10     	; 0xea4 <IIC_voidStartCondition+0xa0>
		__ticks = 1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	3f c0       	rjmp	.+126    	; 0xf22 <IIC_voidStartCondition+0x11e>
	else if (__tmp > 65535)
     ea4:	6f 81       	ldd	r22, Y+7	; 0x07
     ea6:	78 85       	ldd	r23, Y+8	; 0x08
     ea8:	89 85       	ldd	r24, Y+9	; 0x09
     eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	3f ef       	ldi	r19, 0xFF	; 255
     eb0:	4f e7       	ldi	r20, 0x7F	; 127
     eb2:	57 e4       	ldi	r21, 0x47	; 71
     eb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eb8:	18 16       	cp	r1, r24
     eba:	4c f5       	brge	.+82     	; 0xf0e <IIC_voidStartCondition+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
     ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e2       	ldi	r20, 0x20	; 32
     eca:	51 e4       	ldi	r21, 0x41	; 65
     ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	9e 83       	std	Y+6, r25	; 0x06
     ee2:	8d 83       	std	Y+5, r24	; 0x05
     ee4:	0f c0       	rjmp	.+30     	; 0xf04 <IIC_voidStartCondition+0x100>
     ee6:	80 e9       	ldi	r24, 0x90	; 144
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	9c 83       	std	Y+4, r25	; 0x04
     eec:	8b 83       	std	Y+3, r24	; 0x03
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <IIC_voidStartCondition+0xee>
     ef6:	9c 83       	std	Y+4, r25	; 0x04
     ef8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	9e 81       	ldd	r25, Y+6	; 0x06
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	9e 83       	std	Y+6, r25	; 0x06
     f02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f04:	8d 81       	ldd	r24, Y+5	; 0x05
     f06:	9e 81       	ldd	r25, Y+6	; 0x06
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	69 f7       	brne	.-38     	; 0xee6 <IIC_voidStartCondition+0xe2>
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <IIC_voidStartCondition+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0e:	6f 81       	ldd	r22, Y+7	; 0x07
     f10:	78 85       	ldd	r23, Y+8	; 0x08
     f12:	89 85       	ldd	r24, Y+9	; 0x09
     f14:	9a 85       	ldd	r25, Y+10	; 0x0a
     f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	9e 83       	std	Y+6, r25	; 0x06
     f20:	8d 83       	std	Y+5, r24	; 0x05
     f22:	8d 81       	ldd	r24, Y+5	; 0x05
     f24:	9e 81       	ldd	r25, Y+6	; 0x06
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <IIC_voidStartCondition+0x12a>
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	return;
}
     f36:	2e 96       	adiw	r28, 0x0e	; 14
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <IIC_voidSendSlaveAddressWrite>:
void IIC_voidSendSlaveAddressWrite(u8 Copy_u8Address)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	2f 97       	sbiw	r28, 0x0f	; 15
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	8f 87       	std	Y+15, r24	; 0x0f

	TWDR = (Copy_u8Address << 1);
     f5e:	e3 e2       	ldi	r30, 0x23	; 35
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	8f 85       	ldd	r24, Y+15	; 0x0f
     f64:	88 0f       	add	r24, r24
     f66:	80 83       	st	Z, r24
    TWCR|=(1<<7);
     f68:	a6 e5       	ldi	r26, 0x56	; 86
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e6 e5       	ldi	r30, 0x56	; 86
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	80 68       	ori	r24, 0x80	; 128
     f74:	8c 93       	st	X, r24
	while((TWCR>>7) == 0);
     f76:	e6 e5       	ldi	r30, 0x56	; 86
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	88 23       	and	r24, r24
     f7e:	dc f7       	brge	.-10     	; 0xf76 <IIC_voidSendSlaveAddressWrite+0x2e>
	while((TWSR & 0xF8) != SLAVE_AD_AND_WR_ACK);
     f80:	e1 e2       	ldi	r30, 0x21	; 33
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	88 7f       	andi	r24, 0xF8	; 248
     f8c:	90 70       	andi	r25, 0x00	; 0
     f8e:	88 31       	cpi	r24, 0x18	; 24
     f90:	91 05       	cpc	r25, r1
     f92:	b1 f7       	brne	.-20     	; 0xf80 <IIC_voidSendSlaveAddressWrite+0x38>
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a0 e2       	ldi	r26, 0x20	; 32
     f9a:	b1 e4       	ldi	r27, 0x41	; 65
     f9c:	8b 87       	std	Y+11, r24	; 0x0b
     f9e:	9c 87       	std	Y+12, r25	; 0x0c
     fa0:	ad 87       	std	Y+13, r26	; 0x0d
     fa2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa8:	8d 85       	ldd	r24, Y+13	; 0x0d
     faa:	9e 85       	ldd	r25, Y+14	; 0x0e
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	4a e7       	ldi	r20, 0x7A	; 122
     fb2:	55 e4       	ldi	r21, 0x45	; 69
     fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	8f 83       	std	Y+7, r24	; 0x07
     fbe:	98 87       	std	Y+8, r25	; 0x08
     fc0:	a9 87       	std	Y+9, r26	; 0x09
     fc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fc4:	6f 81       	ldd	r22, Y+7	; 0x07
     fc6:	78 85       	ldd	r23, Y+8	; 0x08
     fc8:	89 85       	ldd	r24, Y+9	; 0x09
     fca:	9a 85       	ldd	r25, Y+10	; 0x0a
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e8       	ldi	r20, 0x80	; 128
     fd2:	5f e3       	ldi	r21, 0x3F	; 63
     fd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fd8:	88 23       	and	r24, r24
     fda:	2c f4       	brge	.+10     	; 0xfe6 <IIC_voidSendSlaveAddressWrite+0x9e>
		__ticks = 1;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	9e 83       	std	Y+6, r25	; 0x06
     fe2:	8d 83       	std	Y+5, r24	; 0x05
     fe4:	3f c0       	rjmp	.+126    	; 0x1064 <IIC_voidSendSlaveAddressWrite+0x11c>
	else if (__tmp > 65535)
     fe6:	6f 81       	ldd	r22, Y+7	; 0x07
     fe8:	78 85       	ldd	r23, Y+8	; 0x08
     fea:	89 85       	ldd	r24, Y+9	; 0x09
     fec:	9a 85       	ldd	r25, Y+10	; 0x0a
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	3f ef       	ldi	r19, 0xFF	; 255
     ff2:	4f e7       	ldi	r20, 0x7F	; 127
     ff4:	57 e4       	ldi	r21, 0x47	; 71
     ff6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ffa:	18 16       	cp	r1, r24
     ffc:	4c f5       	brge	.+82     	; 0x1050 <IIC_voidSendSlaveAddressWrite+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1000:	7c 85       	ldd	r23, Y+12	; 0x0c
    1002:	8d 85       	ldd	r24, Y+13	; 0x0d
    1004:	9e 85       	ldd	r25, Y+14	; 0x0e
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e2       	ldi	r20, 0x20	; 32
    100c:	51 e4       	ldi	r21, 0x41	; 65
    100e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	bc 01       	movw	r22, r24
    1018:	cd 01       	movw	r24, r26
    101a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	9e 83       	std	Y+6, r25	; 0x06
    1024:	8d 83       	std	Y+5, r24	; 0x05
    1026:	0f c0       	rjmp	.+30     	; 0x1046 <IIC_voidSendSlaveAddressWrite+0xfe>
    1028:	80 e9       	ldi	r24, 0x90	; 144
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	9c 83       	std	Y+4, r25	; 0x04
    102e:	8b 83       	std	Y+3, r24	; 0x03
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <IIC_voidSendSlaveAddressWrite+0xec>
    1038:	9c 83       	std	Y+4, r25	; 0x04
    103a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	9e 81       	ldd	r25, Y+6	; 0x06
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	9e 83       	std	Y+6, r25	; 0x06
    1044:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	9e 81       	ldd	r25, Y+6	; 0x06
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	69 f7       	brne	.-38     	; 0x1028 <IIC_voidSendSlaveAddressWrite+0xe0>
    104e:	14 c0       	rjmp	.+40     	; 0x1078 <IIC_voidSendSlaveAddressWrite+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1050:	6f 81       	ldd	r22, Y+7	; 0x07
    1052:	78 85       	ldd	r23, Y+8	; 0x08
    1054:	89 85       	ldd	r24, Y+9	; 0x09
    1056:	9a 85       	ldd	r25, Y+10	; 0x0a
    1058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	9e 83       	std	Y+6, r25	; 0x06
    1062:	8d 83       	std	Y+5, r24	; 0x05
    1064:	8d 81       	ldd	r24, Y+5	; 0x05
    1066:	9e 81       	ldd	r25, Y+6	; 0x06
    1068:	9a 83       	std	Y+2, r25	; 0x02
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	9a 81       	ldd	r25, Y+2	; 0x02
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <IIC_voidSendSlaveAddressWrite+0x128>
    1074:	9a 83       	std	Y+2, r25	; 0x02
    1076:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	return;
}
    1078:	2f 96       	adiw	r28, 0x0f	; 15
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <IIC_voidSendSlaveAddressRead>:
void IIC_voidSendSlaveAddressRead(u8 Copy_u8Address)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	2f 97       	sbiw	r28, 0x0f	; 15
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	8f 87       	std	Y+15, r24	; 0x0f

	TWDR = ((Copy_u8Address << 1) | 1);
    10a0:	e3 e2       	ldi	r30, 0x23	; 35
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	81 60       	ori	r24, 0x01	; 1
    10b0:	80 83       	st	Z, r24
	TWCR|=(1<<7);
    10b2:	a6 e5       	ldi	r26, 0x56	; 86
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e6 e5       	ldi	r30, 0x56	; 86
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	80 68       	ori	r24, 0x80	; 128
    10be:	8c 93       	st	X, r24
	while((TWCR>>7) == 0);
    10c0:	e6 e5       	ldi	r30, 0x56	; 86
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	88 23       	and	r24, r24
    10c8:	dc f7       	brge	.-10     	; 0x10c0 <IIC_voidSendSlaveAddressRead+0x36>
	while((TWSR & 0xF8) != SLAVE_AD_AND_RD_ACK);
    10ca:	e1 e2       	ldi	r30, 0x21	; 33
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	88 2f       	mov	r24, r24
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	88 7f       	andi	r24, 0xF8	; 248
    10d6:	90 70       	andi	r25, 0x00	; 0
    10d8:	80 34       	cpi	r24, 0x40	; 64
    10da:	91 05       	cpc	r25, r1
    10dc:	b1 f7       	brne	.-20     	; 0x10ca <IIC_voidSendSlaveAddressRead+0x40>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	a0 e2       	ldi	r26, 0x20	; 32
    10e4:	b1 e4       	ldi	r27, 0x41	; 65
    10e6:	8b 87       	std	Y+11, r24	; 0x0b
    10e8:	9c 87       	std	Y+12, r25	; 0x0c
    10ea:	ad 87       	std	Y+13, r26	; 0x0d
    10ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	4a e7       	ldi	r20, 0x7A	; 122
    10fc:	55 e4       	ldi	r21, 0x45	; 69
    10fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	8f 83       	std	Y+7, r24	; 0x07
    1108:	98 87       	std	Y+8, r25	; 0x08
    110a:	a9 87       	std	Y+9, r26	; 0x09
    110c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    110e:	6f 81       	ldd	r22, Y+7	; 0x07
    1110:	78 85       	ldd	r23, Y+8	; 0x08
    1112:	89 85       	ldd	r24, Y+9	; 0x09
    1114:	9a 85       	ldd	r25, Y+10	; 0x0a
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	40 e8       	ldi	r20, 0x80	; 128
    111c:	5f e3       	ldi	r21, 0x3F	; 63
    111e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1122:	88 23       	and	r24, r24
    1124:	2c f4       	brge	.+10     	; 0x1130 <IIC_voidSendSlaveAddressRead+0xa6>
		__ticks = 1;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	9e 83       	std	Y+6, r25	; 0x06
    112c:	8d 83       	std	Y+5, r24	; 0x05
    112e:	3f c0       	rjmp	.+126    	; 0x11ae <IIC_voidSendSlaveAddressRead+0x124>
	else if (__tmp > 65535)
    1130:	6f 81       	ldd	r22, Y+7	; 0x07
    1132:	78 85       	ldd	r23, Y+8	; 0x08
    1134:	89 85       	ldd	r24, Y+9	; 0x09
    1136:	9a 85       	ldd	r25, Y+10	; 0x0a
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	3f ef       	ldi	r19, 0xFF	; 255
    113c:	4f e7       	ldi	r20, 0x7F	; 127
    113e:	57 e4       	ldi	r21, 0x47	; 71
    1140:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1144:	18 16       	cp	r1, r24
    1146:	4c f5       	brge	.+82     	; 0x119a <IIC_voidSendSlaveAddressRead+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1148:	6b 85       	ldd	r22, Y+11	; 0x0b
    114a:	7c 85       	ldd	r23, Y+12	; 0x0c
    114c:	8d 85       	ldd	r24, Y+13	; 0x0d
    114e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e2       	ldi	r20, 0x20	; 32
    1156:	51 e4       	ldi	r21, 0x41	; 65
    1158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	bc 01       	movw	r22, r24
    1162:	cd 01       	movw	r24, r26
    1164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	9e 83       	std	Y+6, r25	; 0x06
    116e:	8d 83       	std	Y+5, r24	; 0x05
    1170:	0f c0       	rjmp	.+30     	; 0x1190 <IIC_voidSendSlaveAddressRead+0x106>
    1172:	80 e9       	ldi	r24, 0x90	; 144
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	9c 83       	std	Y+4, r25	; 0x04
    1178:	8b 83       	std	Y+3, r24	; 0x03
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	9c 81       	ldd	r25, Y+4	; 0x04
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	f1 f7       	brne	.-4      	; 0x117e <IIC_voidSendSlaveAddressRead+0xf4>
    1182:	9c 83       	std	Y+4, r25	; 0x04
    1184:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	9e 83       	std	Y+6, r25	; 0x06
    118e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1190:	8d 81       	ldd	r24, Y+5	; 0x05
    1192:	9e 81       	ldd	r25, Y+6	; 0x06
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	69 f7       	brne	.-38     	; 0x1172 <IIC_voidSendSlaveAddressRead+0xe8>
    1198:	14 c0       	rjmp	.+40     	; 0x11c2 <IIC_voidSendSlaveAddressRead+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119a:	6f 81       	ldd	r22, Y+7	; 0x07
    119c:	78 85       	ldd	r23, Y+8	; 0x08
    119e:	89 85       	ldd	r24, Y+9	; 0x09
    11a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	9a 83       	std	Y+2, r25	; 0x02
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <IIC_voidSendSlaveAddressRead+0x130>
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	return;
}
    11c2:	2f 96       	adiw	r28, 0x0f	; 15
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <IIC_voidSendData>:
void IIC_voidSendData(u8 Copy_u8Data)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	2f 97       	sbiw	r28, 0x0f	; 15
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	8f 87       	std	Y+15, r24	; 0x0f

	TWDR = Copy_u8Data;
    11ea:	e3 e2       	ldi	r30, 0x23	; 35
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f0:	80 83       	st	Z, r24
    TWCR&=~(1<<5);
    11f2:	a6 e5       	ldi	r26, 0x56	; 86
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e6 e5       	ldi	r30, 0x56	; 86
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8f 7d       	andi	r24, 0xDF	; 223
    11fe:	8c 93       	st	X, r24
	TWCR|=(1<<7);
    1200:	a6 e5       	ldi	r26, 0x56	; 86
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e6 e5       	ldi	r30, 0x56	; 86
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	80 68       	ori	r24, 0x80	; 128
    120c:	8c 93       	st	X, r24
	while((TWCR>>7)== 0);
    120e:	e6 e5       	ldi	r30, 0x56	; 86
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	88 23       	and	r24, r24
    1216:	dc f7       	brge	.-10     	; 0x120e <IIC_voidSendData+0x3a>
	while((TWSR & 0xF8) != WR_BYTE_ACK);
    1218:	e1 e2       	ldi	r30, 0x21	; 33
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	88 7f       	andi	r24, 0xF8	; 248
    1224:	90 70       	andi	r25, 0x00	; 0
    1226:	88 32       	cpi	r24, 0x28	; 40
    1228:	91 05       	cpc	r25, r1
    122a:	b1 f7       	brne	.-20     	; 0x1218 <IIC_voidSendData+0x44>
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	a8 ec       	ldi	r26, 0xC8	; 200
    1232:	b2 e4       	ldi	r27, 0x42	; 66
    1234:	8b 87       	std	Y+11, r24	; 0x0b
    1236:	9c 87       	std	Y+12, r25	; 0x0c
    1238:	ad 87       	std	Y+13, r26	; 0x0d
    123a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123c:	6b 85       	ldd	r22, Y+11	; 0x0b
    123e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1240:	8d 85       	ldd	r24, Y+13	; 0x0d
    1242:	9e 85       	ldd	r25, Y+14	; 0x0e
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	4a e7       	ldi	r20, 0x7A	; 122
    124a:	55 e4       	ldi	r21, 0x45	; 69
    124c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	8f 83       	std	Y+7, r24	; 0x07
    1256:	98 87       	std	Y+8, r25	; 0x08
    1258:	a9 87       	std	Y+9, r26	; 0x09
    125a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    125c:	6f 81       	ldd	r22, Y+7	; 0x07
    125e:	78 85       	ldd	r23, Y+8	; 0x08
    1260:	89 85       	ldd	r24, Y+9	; 0x09
    1262:	9a 85       	ldd	r25, Y+10	; 0x0a
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e8       	ldi	r20, 0x80	; 128
    126a:	5f e3       	ldi	r21, 0x3F	; 63
    126c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1270:	88 23       	and	r24, r24
    1272:	2c f4       	brge	.+10     	; 0x127e <IIC_voidSendData+0xaa>
		__ticks = 1;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	9e 83       	std	Y+6, r25	; 0x06
    127a:	8d 83       	std	Y+5, r24	; 0x05
    127c:	3f c0       	rjmp	.+126    	; 0x12fc <IIC_voidSendData+0x128>
	else if (__tmp > 65535)
    127e:	6f 81       	ldd	r22, Y+7	; 0x07
    1280:	78 85       	ldd	r23, Y+8	; 0x08
    1282:	89 85       	ldd	r24, Y+9	; 0x09
    1284:	9a 85       	ldd	r25, Y+10	; 0x0a
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	3f ef       	ldi	r19, 0xFF	; 255
    128a:	4f e7       	ldi	r20, 0x7F	; 127
    128c:	57 e4       	ldi	r21, 0x47	; 71
    128e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1292:	18 16       	cp	r1, r24
    1294:	4c f5       	brge	.+82     	; 0x12e8 <IIC_voidSendData+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1296:	6b 85       	ldd	r22, Y+11	; 0x0b
    1298:	7c 85       	ldd	r23, Y+12	; 0x0c
    129a:	8d 85       	ldd	r24, Y+13	; 0x0d
    129c:	9e 85       	ldd	r25, Y+14	; 0x0e
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e2       	ldi	r20, 0x20	; 32
    12a4:	51 e4       	ldi	r21, 0x41	; 65
    12a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	bc 01       	movw	r22, r24
    12b0:	cd 01       	movw	r24, r26
    12b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	9e 83       	std	Y+6, r25	; 0x06
    12bc:	8d 83       	std	Y+5, r24	; 0x05
    12be:	0f c0       	rjmp	.+30     	; 0x12de <IIC_voidSendData+0x10a>
    12c0:	80 e9       	ldi	r24, 0x90	; 144
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	9c 83       	std	Y+4, r25	; 0x04
    12c6:	8b 83       	std	Y+3, r24	; 0x03
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	f1 f7       	brne	.-4      	; 0x12cc <IIC_voidSendData+0xf8>
    12d0:	9c 83       	std	Y+4, r25	; 0x04
    12d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d4:	8d 81       	ldd	r24, Y+5	; 0x05
    12d6:	9e 81       	ldd	r25, Y+6	; 0x06
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	9e 83       	std	Y+6, r25	; 0x06
    12dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	69 f7       	brne	.-38     	; 0x12c0 <IIC_voidSendData+0xec>
    12e6:	14 c0       	rjmp	.+40     	; 0x1310 <IIC_voidSendData+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ea:	78 85       	ldd	r23, Y+8	; 0x08
    12ec:	89 85       	ldd	r24, Y+9	; 0x09
    12ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	9e 83       	std	Y+6, r25	; 0x06
    12fa:	8d 83       	std	Y+5, r24	; 0x05
    12fc:	8d 81       	ldd	r24, Y+5	; 0x05
    12fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1300:	9a 83       	std	Y+2, r25	; 0x02
    1302:	89 83       	std	Y+1, r24	; 0x01
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <IIC_voidSendData+0x134>
    130c:	9a 83       	std	Y+2, r25	; 0x02
    130e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	return;
}
    1310:	2f 96       	adiw	r28, 0x0f	; 15
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <IIC_voidReadData>:
void IIC_voidReadData(u8* Copy_u8Data)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	00 d0       	rcall	.+0      	; 0x1328 <IIC_voidReadData+0x6>
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	9a 83       	std	Y+2, r25	; 0x02
    132e:	89 83       	std	Y+1, r24	; 0x01
	TWCR = 0xC4;
    1330:	e6 e5       	ldi	r30, 0x56	; 86
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	84 ec       	ldi	r24, 0xC4	; 196
    1336:	80 83       	st	Z, r24
	while((TWCR>>7)==0);
    1338:	e6 e5       	ldi	r30, 0x56	; 86
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	88 23       	and	r24, r24
    1340:	dc f7       	brge	.-10     	; 0x1338 <IIC_voidReadData+0x16>
	*Copy_u8Data=TWDR;
    1342:	e3 e2       	ldi	r30, 0x23	; 35
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	e9 81       	ldd	r30, Y+1	; 0x01
    134a:	fa 81       	ldd	r31, Y+2	; 0x02
    134c:	80 83       	st	Z, r24
	return ;

}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <IIC_voidReadDataNoAck>:
void IIC_voidReadDataNoAck(u8* Copy_u8Data)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <IIC_voidReadDataNoAck+0x6>
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	9a 83       	std	Y+2, r25	; 0x02
    1364:	89 83       	std	Y+1, r24	; 0x01

	TWCR = 0x84;;
    1366:	e6 e5       	ldi	r30, 0x56	; 86
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	84 e8       	ldi	r24, 0x84	; 132
    136c:	80 83       	st	Z, r24
	while((TWCR>>7) == 0);
    136e:	e6 e5       	ldi	r30, 0x56	; 86
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	88 23       	and	r24, r24
    1376:	dc f7       	brge	.-10     	; 0x136e <IIC_voidReadDataNoAck+0x16>
	*Copy_u8Data=TWDR;
    1378:	e3 e2       	ldi	r30, 0x23	; 35
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	e9 81       	ldd	r30, Y+1	; 0x01
    1380:	fa 81       	ldd	r31, Y+2	; 0x02
    1382:	80 83       	st	Z, r24
	return ;
}
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <IIC_voidRepeatedStart>:
void IIC_voidRepeatedStart(void)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62

	TWCR|=(1<<5);
    1396:	a6 e5       	ldi	r26, 0x56	; 86
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e6 e5       	ldi	r30, 0x56	; 86
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 62       	ori	r24, 0x20	; 32
    13a2:	8c 93       	st	X, r24
	TWCR|=(1<<7);
    13a4:	a6 e5       	ldi	r26, 0x56	; 86
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e6 e5       	ldi	r30, 0x56	; 86
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	80 68       	ori	r24, 0x80	; 128
    13b0:	8c 93       	st	X, r24
	while((TWCR>>7) == 0);
    13b2:	e6 e5       	ldi	r30, 0x56	; 86
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	88 23       	and	r24, r24
    13ba:	dc f7       	brge	.-10     	; 0x13b2 <IIC_voidRepeatedStart+0x24>
	while((TWSR & 0xF8) != REP_START_ACK);
    13bc:	e1 e2       	ldi	r30, 0x21	; 33
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	88 2f       	mov	r24, r24
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	88 7f       	andi	r24, 0xF8	; 248
    13c8:	90 70       	andi	r25, 0x00	; 0
    13ca:	80 31       	cpi	r24, 0x10	; 16
    13cc:	91 05       	cpc	r25, r1
    13ce:	b1 f7       	brne	.-20     	; 0x13bc <IIC_voidRepeatedStart+0x2e>
	return ;
}
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <IIC_voidStopCondition>:
void IIC_voidStopCondition(void)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	2e 97       	sbiw	r28, 0x0e	; 14
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61

	TWCR|=(1<<4);
    13ea:	a6 e5       	ldi	r26, 0x56	; 86
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e6 e5       	ldi	r30, 0x56	; 86
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	80 61       	ori	r24, 0x10	; 16
    13f6:	8c 93       	st	X, r24
		TWCR|=(1<<7);
    13f8:	a6 e5       	ldi	r26, 0x56	; 86
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e6 e5       	ldi	r30, 0x56	; 86
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 68       	ori	r24, 0x80	; 128
    1404:	8c 93       	st	X, r24
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a0 e8       	ldi	r26, 0x80	; 128
    140c:	bf e3       	ldi	r27, 0x3F	; 63
    140e:	8b 87       	std	Y+11, r24	; 0x0b
    1410:	9c 87       	std	Y+12, r25	; 0x0c
    1412:	ad 87       	std	Y+13, r26	; 0x0d
    1414:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1416:	6b 85       	ldd	r22, Y+11	; 0x0b
    1418:	7c 85       	ldd	r23, Y+12	; 0x0c
    141a:	8d 85       	ldd	r24, Y+13	; 0x0d
    141c:	9e 85       	ldd	r25, Y+14	; 0x0e
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	4a e7       	ldi	r20, 0x7A	; 122
    1424:	55 e4       	ldi	r21, 0x45	; 69
    1426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	8f 83       	std	Y+7, r24	; 0x07
    1430:	98 87       	std	Y+8, r25	; 0x08
    1432:	a9 87       	std	Y+9, r26	; 0x09
    1434:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1436:	6f 81       	ldd	r22, Y+7	; 0x07
    1438:	78 85       	ldd	r23, Y+8	; 0x08
    143a:	89 85       	ldd	r24, Y+9	; 0x09
    143c:	9a 85       	ldd	r25, Y+10	; 0x0a
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e8       	ldi	r20, 0x80	; 128
    1444:	5f e3       	ldi	r21, 0x3F	; 63
    1446:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    144a:	88 23       	and	r24, r24
    144c:	2c f4       	brge	.+10     	; 0x1458 <IIC_voidStopCondition+0x82>
		__ticks = 1;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	9e 83       	std	Y+6, r25	; 0x06
    1454:	8d 83       	std	Y+5, r24	; 0x05
    1456:	3f c0       	rjmp	.+126    	; 0x14d6 <IIC_voidStopCondition+0x100>
	else if (__tmp > 65535)
    1458:	6f 81       	ldd	r22, Y+7	; 0x07
    145a:	78 85       	ldd	r23, Y+8	; 0x08
    145c:	89 85       	ldd	r24, Y+9	; 0x09
    145e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	3f ef       	ldi	r19, 0xFF	; 255
    1464:	4f e7       	ldi	r20, 0x7F	; 127
    1466:	57 e4       	ldi	r21, 0x47	; 71
    1468:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    146c:	18 16       	cp	r1, r24
    146e:	4c f5       	brge	.+82     	; 0x14c2 <IIC_voidStopCondition+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1470:	6b 85       	ldd	r22, Y+11	; 0x0b
    1472:	7c 85       	ldd	r23, Y+12	; 0x0c
    1474:	8d 85       	ldd	r24, Y+13	; 0x0d
    1476:	9e 85       	ldd	r25, Y+14	; 0x0e
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e2       	ldi	r20, 0x20	; 32
    147e:	51 e4       	ldi	r21, 0x41	; 65
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	bc 01       	movw	r22, r24
    148a:	cd 01       	movw	r24, r26
    148c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	9e 83       	std	Y+6, r25	; 0x06
    1496:	8d 83       	std	Y+5, r24	; 0x05
    1498:	0f c0       	rjmp	.+30     	; 0x14b8 <IIC_voidStopCondition+0xe2>
    149a:	80 e9       	ldi	r24, 0x90	; 144
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	9c 83       	std	Y+4, r25	; 0x04
    14a0:	8b 83       	std	Y+3, r24	; 0x03
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	f1 f7       	brne	.-4      	; 0x14a6 <IIC_voidStopCondition+0xd0>
    14aa:	9c 83       	std	Y+4, r25	; 0x04
    14ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ae:	8d 81       	ldd	r24, Y+5	; 0x05
    14b0:	9e 81       	ldd	r25, Y+6	; 0x06
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	9e 83       	std	Y+6, r25	; 0x06
    14b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ba:	9e 81       	ldd	r25, Y+6	; 0x06
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	69 f7       	brne	.-38     	; 0x149a <IIC_voidStopCondition+0xc4>
    14c0:	14 c0       	rjmp	.+40     	; 0x14ea <IIC_voidStopCondition+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c2:	6f 81       	ldd	r22, Y+7	; 0x07
    14c4:	78 85       	ldd	r23, Y+8	; 0x08
    14c6:	89 85       	ldd	r24, Y+9	; 0x09
    14c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	8d 83       	std	Y+5, r24	; 0x05
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	9a 81       	ldd	r25, Y+2	; 0x02
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <IIC_voidStopCondition+0x10c>
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	return;
}
    14ea:	2e 96       	adiw	r28, 0x0e	; 14
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <GIE_voidEnable>:
 */
#include"../../LIBRARY/errorState.h"
#include"../../LIBRARY/stdTypes.h"
#include"GIE_conf.h"
#include"GIE_priv.h"
void GIE_voidEnable(void){
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62

	SREG|=(1<<7);
    1504:	af e5       	ldi	r26, 0x5F	; 95
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	ef e5       	ldi	r30, 0x5F	; 95
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	80 68       	ori	r24, 0x80	; 128
    1510:	8c 93       	st	X, r24
	return ;
}
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <GIE_voidDisable>:
void GIE_voidDisable(void){
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62

	SREG&=~(1<<7);
    1520:	af e5       	ldi	r26, 0x5F	; 95
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	ef e5       	ldi	r30, 0x5F	; 95
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8f 77       	andi	r24, 0x7F	; 127
    152c:	8c 93       	st	X, r24
	return;
}
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <EXTI_voidInit>:
#include"EXTI_priv.h"
#include"../DIO/DIO_int.h"
static void (*EXTI_pFunISR0Fun)(void) = NULL;
static void (*EXTI_pFunISR1Fun)(void) = NULL;
static void (*EXTI_pFunISR2Fun)(void) = NULL;
void EXTI_voidInit(void){
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62

	//INT0
#if EXTI0_INT_MODE==EVENT_TRIGGERED
	GICR|=(DIO_u8BIT_MASK<<6);
    153c:	ab e5       	ldi	r26, 0x5B	; 91
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	eb e5       	ldi	r30, 0x5B	; 91
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	80 64       	ori	r24, 0x40	; 64
    1548:	8c 93       	st	X, r24
#else
#error exti0 configuration is wrong

#endif
	//clear register before intializion
	MCUCR &=~(3<<0);
    154a:	a5 e5       	ldi	r26, 0x55	; 85
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e5 e5       	ldi	r30, 0x55	; 85
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8c 7f       	andi	r24, 0xFC	; 252
    1556:	8c 93       	st	X, r24
#if EXTI0_SENSE_LEVEL == LOW_LEVEL

#elif EXTI0_SENSE_LEVEL == ANY_CHANGE
	MCUCR |= (1<<0);
#elif EXTI0_SENSE_LEVEL == FALLING
	MCUCR |= (2<<0);
    1558:	a5 e5       	ldi	r26, 0x55	; 85
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e5 e5       	ldi	r30, 0x55	; 85
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	82 60       	ori	r24, 0x02	; 2
    1564:	8c 93       	st	X, r24
#endif

	//INT1

#if EXTI1_INT_MODE==EVENT_TRIGGERED
	GICR|=(DIO_u8BIT_MASK<<7);
    1566:	ab e5       	ldi	r26, 0x5B	; 91
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	eb e5       	ldi	r30, 0x5B	; 91
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	80 68       	ori	r24, 0x80	; 128
    1572:	8c 93       	st	X, r24
	GICR&=~(DIO_u8BIT_MASK<<7);
#else
//#error exti0 configuration is wrong
#endif
	//clear register before intializion
	MCUCR &=~(3<<2);
    1574:	a5 e5       	ldi	r26, 0x55	; 85
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e5 e5       	ldi	r30, 0x55	; 85
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	83 7f       	andi	r24, 0xF3	; 243
    1580:	8c 93       	st	X, r24
#if EXTI1_SENSE_LEVEL == LOW_LEVEL

#elif EXTI1_SENSE_LEVEL == ANY_CHANGE
	MCUCR |= (1<<2);
#elif EXTI1_SENSE_LEVEL == FALLING
	MCUCR |= (2<<2);
    1582:	a5 e5       	ldi	r26, 0x55	; 85
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e5       	ldi	r30, 0x55	; 85
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	88 60       	ori	r24, 0x08	; 8
    158e:	8c 93       	st	X, r24
#endif


	//INT2
#if EXTI2_INT_MODE==EVENT_TRIGGERED
	GICR|=(DIO_u8BIT_MASK<<5);
    1590:	ab e5       	ldi	r26, 0x5B	; 91
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	eb e5       	ldi	r30, 0x5B	; 91
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	80 62       	ori	r24, 0x20	; 32
    159c:	8c 93       	st	X, r24
	GICR&=~(DIO_u8BIT_MASK<<5);
#else
//#error exti2 configuration is wrong
#endif
	//clear register before intializion
	MCUCSR&=~(1<<6);
    159e:	a4 e5       	ldi	r26, 0x54	; 84
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e4 e5       	ldi	r30, 0x54	; 84
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	8f 7b       	andi	r24, 0xBF	; 191
    15aa:	8c 93       	st	X, r24

#if EXTI2_SENSE_LEVEL==FALLING

#elif EXTI2_SENSE_LEVEL==RISING
	MCUCSR|=(1<<6);
    15ac:	a4 e5       	ldi	r26, 0x54	; 84
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e4 e5       	ldi	r30, 0x54	; 84
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	80 64       	ori	r24, 0x40	; 64
    15b8:	8c 93       	st	X, r24
#else
#error sense level of exti 0 is wrong
#endif
	return ;
}
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <EXTI_voidSetSenseLevel>:

void EXTI_voidSetSenseLevel(u8 Copy_u8IntPinNum , u8 Copy_u8SenseLevel){
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	28 97       	sbiw	r28, 0x08	; 8
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8IntPinNum == INT0)
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	88 23       	and	r24, r24
    15dc:	d1 f5       	brne	.+116    	; 0x1652 <EXTI_voidSetSenseLevel+0x92>
		{
			MCUCR &=~(3<<0);
    15de:	a5 e5       	ldi	r26, 0x55	; 85
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 e5       	ldi	r30, 0x55	; 85
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	8c 7f       	andi	r24, 0xFC	; 252
    15ea:	8c 93       	st	X, r24
			switch(Copy_u8SenseLevel)
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	38 87       	std	Y+8, r19	; 0x08
    15f4:	2f 83       	std	Y+7, r18	; 0x07
    15f6:	8f 81       	ldd	r24, Y+7	; 0x07
    15f8:	98 85       	ldd	r25, Y+8	; 0x08
    15fa:	82 32       	cpi	r24, 0x22	; 34
    15fc:	91 05       	cpc	r25, r1
    15fe:	89 f0       	breq	.+34     	; 0x1622 <EXTI_voidSetSenseLevel+0x62>
    1600:	2f 81       	ldd	r18, Y+7	; 0x07
    1602:	38 85       	ldd	r19, Y+8	; 0x08
    1604:	23 32       	cpi	r18, 0x23	; 35
    1606:	31 05       	cpc	r19, r1
    1608:	34 f4       	brge	.+12     	; 0x1616 <EXTI_voidSetSenseLevel+0x56>
    160a:	8f 81       	ldd	r24, Y+7	; 0x07
    160c:	98 85       	ldd	r25, Y+8	; 0x08
    160e:	8a 30       	cpi	r24, 0x0A	; 10
    1610:	91 05       	cpc	r25, r1
    1612:	79 f0       	breq	.+30     	; 0x1632 <EXTI_voidSetSenseLevel+0x72>
    1614:	7b c0       	rjmp	.+246    	; 0x170c <EXTI_voidSetSenseLevel+0x14c>
    1616:	2f 81       	ldd	r18, Y+7	; 0x07
    1618:	38 85       	ldd	r19, Y+8	; 0x08
    161a:	29 34       	cpi	r18, 0x49	; 73
    161c:	31 05       	cpc	r19, r1
    161e:	89 f0       	breq	.+34     	; 0x1642 <EXTI_voidSetSenseLevel+0x82>
    1620:	75 c0       	rjmp	.+234    	; 0x170c <EXTI_voidSetSenseLevel+0x14c>
			{
			case LOW_LEVEL:

				break;
			case ANY_CHANGE:
				MCUCR |= (1<<0);
    1622:	a5 e5       	ldi	r26, 0x55	; 85
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e5 e5       	ldi	r30, 0x55	; 85
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	81 60       	ori	r24, 0x01	; 1
    162e:	8c 93       	st	X, r24
    1630:	6d c0       	rjmp	.+218    	; 0x170c <EXTI_voidSetSenseLevel+0x14c>
				break;
			case FALLING:
				MCUCR |= (2<<0);
    1632:	a5 e5       	ldi	r26, 0x55	; 85
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e5 e5       	ldi	r30, 0x55	; 85
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	82 60       	ori	r24, 0x02	; 2
    163e:	8c 93       	st	X, r24
    1640:	65 c0       	rjmp	.+202    	; 0x170c <EXTI_voidSetSenseLevel+0x14c>
				break;
			case RISING:
				MCUCR |= (3<<0);
    1642:	a5 e5       	ldi	r26, 0x55	; 85
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e5 e5       	ldi	r30, 0x55	; 85
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	83 60       	ori	r24, 0x03	; 3
    164e:	8c 93       	st	X, r24
    1650:	5d c0       	rjmp	.+186    	; 0x170c <EXTI_voidSetSenseLevel+0x14c>
				break;

			}
		}
		else if(Copy_u8IntPinNum == INT1)
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	d1 f5       	brne	.+116    	; 0x16cc <EXTI_voidSetSenseLevel+0x10c>
		{
           MCUCR&=~(3<<2);
    1658:	a5 e5       	ldi	r26, 0x55	; 85
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e5 e5       	ldi	r30, 0x55	; 85
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	83 7f       	andi	r24, 0xF3	; 243
    1664:	8c 93       	st	X, r24
       	switch(Copy_u8SenseLevel)
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	3e 83       	std	Y+6, r19	; 0x06
    166e:	2d 83       	std	Y+5, r18	; 0x05
    1670:	8d 81       	ldd	r24, Y+5	; 0x05
    1672:	9e 81       	ldd	r25, Y+6	; 0x06
    1674:	82 32       	cpi	r24, 0x22	; 34
    1676:	91 05       	cpc	r25, r1
    1678:	89 f0       	breq	.+34     	; 0x169c <EXTI_voidSetSenseLevel+0xdc>
    167a:	2d 81       	ldd	r18, Y+5	; 0x05
    167c:	3e 81       	ldd	r19, Y+6	; 0x06
    167e:	23 32       	cpi	r18, 0x23	; 35
    1680:	31 05       	cpc	r19, r1
    1682:	34 f4       	brge	.+12     	; 0x1690 <EXTI_voidSetSenseLevel+0xd0>
    1684:	8d 81       	ldd	r24, Y+5	; 0x05
    1686:	9e 81       	ldd	r25, Y+6	; 0x06
    1688:	8a 30       	cpi	r24, 0x0A	; 10
    168a:	91 05       	cpc	r25, r1
    168c:	79 f0       	breq	.+30     	; 0x16ac <EXTI_voidSetSenseLevel+0xec>
    168e:	3e c0       	rjmp	.+124    	; 0x170c <EXTI_voidSetSenseLevel+0x14c>
    1690:	2d 81       	ldd	r18, Y+5	; 0x05
    1692:	3e 81       	ldd	r19, Y+6	; 0x06
    1694:	29 34       	cpi	r18, 0x49	; 73
    1696:	31 05       	cpc	r19, r1
    1698:	89 f0       	breq	.+34     	; 0x16bc <EXTI_voidSetSenseLevel+0xfc>
    169a:	38 c0       	rjmp	.+112    	; 0x170c <EXTI_voidSetSenseLevel+0x14c>
       			{
       			case LOW_LEVEL:

       				break;
       			case ANY_CHANGE:
       				MCUCR |= (1<<2);
    169c:	a5 e5       	ldi	r26, 0x55	; 85
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e5 e5       	ldi	r30, 0x55	; 85
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	84 60       	ori	r24, 0x04	; 4
    16a8:	8c 93       	st	X, r24
    16aa:	30 c0       	rjmp	.+96     	; 0x170c <EXTI_voidSetSenseLevel+0x14c>
       				break;
       			case FALLING:
       				MCUCR |= (2<<2);
    16ac:	a5 e5       	ldi	r26, 0x55	; 85
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e5 e5       	ldi	r30, 0x55	; 85
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	88 60       	ori	r24, 0x08	; 8
    16b8:	8c 93       	st	X, r24
    16ba:	28 c0       	rjmp	.+80     	; 0x170c <EXTI_voidSetSenseLevel+0x14c>
       				break;
       			case RISING:
       				MCUCR |= (3<<2);
    16bc:	a5 e5       	ldi	r26, 0x55	; 85
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e5 e5       	ldi	r30, 0x55	; 85
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	8c 60       	ori	r24, 0x0C	; 12
    16c8:	8c 93       	st	X, r24
    16ca:	20 c0       	rjmp	.+64     	; 0x170c <EXTI_voidSetSenseLevel+0x14c>
       				break;

       			}

		}
		else if(Copy_u8IntPinNum == INT2)
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	82 30       	cpi	r24, 0x02	; 2
    16d0:	e9 f4       	brne	.+58     	; 0x170c <EXTI_voidSetSenseLevel+0x14c>
		{
        MCUCSR&=~(1<<6);
    16d2:	a4 e5       	ldi	r26, 0x54	; 84
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e4 e5       	ldi	r30, 0x54	; 84
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8f 7b       	andi	r24, 0xBF	; 191
    16de:	8c 93       	st	X, r24
        switch(Copy_u8SenseLevel){
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	3c 83       	std	Y+4, r19	; 0x04
    16e8:	2b 83       	std	Y+3, r18	; 0x03
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	9c 81       	ldd	r25, Y+4	; 0x04
    16ee:	8a 30       	cpi	r24, 0x0A	; 10
    16f0:	91 05       	cpc	r25, r1
    16f2:	61 f0       	breq	.+24     	; 0x170c <EXTI_voidSetSenseLevel+0x14c>
    16f4:	2b 81       	ldd	r18, Y+3	; 0x03
    16f6:	3c 81       	ldd	r19, Y+4	; 0x04
    16f8:	29 34       	cpi	r18, 0x49	; 73
    16fa:	31 05       	cpc	r19, r1
    16fc:	39 f4       	brne	.+14     	; 0x170c <EXTI_voidSetSenseLevel+0x14c>
        case FALLING:
        	break;
        case RISING:
        	MCUCSR|=(1<<6);
    16fe:	a4 e5       	ldi	r26, 0x54	; 84
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e4 e5       	ldi	r30, 0x54	; 84
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	80 64       	ori	r24, 0x40	; 64
    170a:	8c 93       	st	X, r24

		}}


		return;
	}
    170c:	28 96       	adiw	r28, 0x08	; 8
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <EXTI_voidEnableInterrupt>:


void EXTI_voidEnableInterrupt(u8 Copy_u8IntPinNum){
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	00 d0       	rcall	.+0      	; 0x1724 <EXTI_voidEnableInterrupt+0x6>
    1724:	0f 92       	push	r0
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntPinNum){
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	3b 83       	std	Y+3, r19	; 0x03
    1734:	2a 83       	std	Y+2, r18	; 0x02
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	9b 81       	ldd	r25, Y+3	; 0x03
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	91 05       	cpc	r25, r1
    173e:	89 f0       	breq	.+34     	; 0x1762 <EXTI_voidEnableInterrupt+0x44>
    1740:	2a 81       	ldd	r18, Y+2	; 0x02
    1742:	3b 81       	ldd	r19, Y+3	; 0x03
    1744:	22 30       	cpi	r18, 0x02	; 2
    1746:	31 05       	cpc	r19, r1
    1748:	a1 f0       	breq	.+40     	; 0x1772 <EXTI_voidEnableInterrupt+0x54>
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	9b 81       	ldd	r25, Y+3	; 0x03
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	b9 f4       	brne	.+46     	; 0x1780 <EXTI_voidEnableInterrupt+0x62>
	case INT0:
		GICR|=(1<<6);
    1752:	ab e5       	ldi	r26, 0x5B	; 91
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	eb e5       	ldi	r30, 0x5B	; 91
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	80 64       	ori	r24, 0x40	; 64
    175e:	8c 93       	st	X, r24
    1760:	0f c0       	rjmp	.+30     	; 0x1780 <EXTI_voidEnableInterrupt+0x62>
		break;
	case INT1:
		GICR|=(1<<7	);
    1762:	ab e5       	ldi	r26, 0x5B	; 91
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	eb e5       	ldi	r30, 0x5B	; 91
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	80 68       	ori	r24, 0x80	; 128
    176e:	8c 93       	st	X, r24
    1770:	07 c0       	rjmp	.+14     	; 0x1780 <EXTI_voidEnableInterrupt+0x62>
		break;
	case INT2:
		GICR|=(1<<5);
    1772:	ab e5       	ldi	r26, 0x5B	; 91
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	eb e5       	ldi	r30, 0x5B	; 91
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	80 62       	ori	r24, 0x20	; 32
    177e:	8c 93       	st	X, r24
		break;

}
return;
}
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <EXTI_voidsDisableInterrupt>:
void EXTI_voidsDisableInterrupt(u8 Copy_u8IntPinNum){
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	00 d0       	rcall	.+0      	; 0x1792 <EXTI_voidsDisableInterrupt+0x6>
    1792:	0f 92       	push	r0
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_u8IntPinNum){
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	3b 83       	std	Y+3, r19	; 0x03
    17a2:	2a 83       	std	Y+2, r18	; 0x02
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	9b 81       	ldd	r25, Y+3	; 0x03
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	91 05       	cpc	r25, r1
    17ac:	89 f0       	breq	.+34     	; 0x17d0 <EXTI_voidsDisableInterrupt+0x44>
    17ae:	2a 81       	ldd	r18, Y+2	; 0x02
    17b0:	3b 81       	ldd	r19, Y+3	; 0x03
    17b2:	22 30       	cpi	r18, 0x02	; 2
    17b4:	31 05       	cpc	r19, r1
    17b6:	a1 f0       	breq	.+40     	; 0x17e0 <EXTI_voidsDisableInterrupt+0x54>
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	9b 81       	ldd	r25, Y+3	; 0x03
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	b9 f4       	brne	.+46     	; 0x17ee <EXTI_voidsDisableInterrupt+0x62>
		case INT0:
			GICR&=~(1<<6);
    17c0:	ab e5       	ldi	r26, 0x5B	; 91
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	eb e5       	ldi	r30, 0x5B	; 91
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	8f 7b       	andi	r24, 0xBF	; 191
    17cc:	8c 93       	st	X, r24
    17ce:	0f c0       	rjmp	.+30     	; 0x17ee <EXTI_voidsDisableInterrupt+0x62>
			break;
		case INT1:
			GICR&=~(1<<7	);
    17d0:	ab e5       	ldi	r26, 0x5B	; 91
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	eb e5       	ldi	r30, 0x5B	; 91
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	8f 77       	andi	r24, 0x7F	; 127
    17dc:	8c 93       	st	X, r24
    17de:	07 c0       	rjmp	.+14     	; 0x17ee <EXTI_voidsDisableInterrupt+0x62>
			break;
		case INT2:
			GICR&=~(1<<5);
    17e0:	ab e5       	ldi	r26, 0x5B	; 91
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	eb e5       	ldi	r30, 0x5B	; 91
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	8f 7d       	andi	r24, 0xDF	; 223
    17ec:	8c 93       	st	X, r24
			break;

}
		return;
}
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <EXTI_voidCallBack>:

void EXTI_voidCallBack(void(*Copy_pFunAppFun)(void) , u8 Copy_u8IntPinNum){
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <EXTI_voidCallBack+0x6>
    1800:	00 d0       	rcall	.+0      	; 0x1802 <EXTI_voidCallBack+0x8>
    1802:	0f 92       	push	r0
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	6b 83       	std	Y+3, r22	; 0x03

	if(Copy_pFunAppFun != NULL)
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	39 f1       	breq	.+78     	; 0x1864 <EXTI_voidCallBack+0x6a>
		{
			switch(Copy_u8IntPinNum){
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3d 83       	std	Y+5, r19	; 0x05
    181e:	2c 83       	std	Y+4, r18	; 0x04
    1820:	8c 81       	ldd	r24, Y+4	; 0x04
    1822:	9d 81       	ldd	r25, Y+5	; 0x05
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	91 05       	cpc	r25, r1
    1828:	81 f0       	breq	.+32     	; 0x184a <EXTI_voidCallBack+0x50>
    182a:	2c 81       	ldd	r18, Y+4	; 0x04
    182c:	3d 81       	ldd	r19, Y+5	; 0x05
    182e:	22 30       	cpi	r18, 0x02	; 2
    1830:	31 05       	cpc	r19, r1
    1832:	91 f0       	breq	.+36     	; 0x1858 <EXTI_voidCallBack+0x5e>
    1834:	8c 81       	ldd	r24, Y+4	; 0x04
    1836:	9d 81       	ldd	r25, Y+5	; 0x05
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	a1 f4       	brne	.+40     	; 0x1864 <EXTI_voidCallBack+0x6a>
			case INT0:
				EXTI_pFunISR0Fun=Copy_pFunAppFun;
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	9a 81       	ldd	r25, Y+2	; 0x02
    1840:	90 93 6b 01 	sts	0x016B, r25
    1844:	80 93 6a 01 	sts	0x016A, r24
    1848:	0d c0       	rjmp	.+26     	; 0x1864 <EXTI_voidCallBack+0x6a>
				break;
			case INT1:
				EXTI_pFunISR1Fun=Copy_pFunAppFun;
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
    184e:	90 93 6d 01 	sts	0x016D, r25
    1852:	80 93 6c 01 	sts	0x016C, r24
    1856:	06 c0       	rjmp	.+12     	; 0x1864 <EXTI_voidCallBack+0x6a>
				break;
			case INT2:
				EXTI_pFunISR2Fun=Copy_pFunAppFun;
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	9a 81       	ldd	r25, Y+2	; 0x02
    185c:	90 93 6f 01 	sts	0x016F, r25
    1860:	80 93 6e 01 	sts	0x016E, r24
				break;

			}
		}
		return;
	}
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <__vector_1>:
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

	//int0
	void __vector_1 (void)
	{
    1874:	1f 92       	push	r1
    1876:	0f 92       	push	r0
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	0f 92       	push	r0
    187c:	11 24       	eor	r1, r1
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	4f 93       	push	r20
    1884:	5f 93       	push	r21
    1886:	6f 93       	push	r22
    1888:	7f 93       	push	r23
    188a:	8f 93       	push	r24
    188c:	9f 93       	push	r25
    188e:	af 93       	push	r26
    1890:	bf 93       	push	r27
    1892:	ef 93       	push	r30
    1894:	ff 93       	push	r31
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
		if (EXTI_pFunISR0Fun != NULL)
    189e:	80 91 6a 01 	lds	r24, 0x016A
    18a2:	90 91 6b 01 	lds	r25, 0x016B
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	29 f0       	breq	.+10     	; 0x18b4 <__vector_1+0x40>
		{
			EXTI_pFunISR0Fun ();
    18aa:	e0 91 6a 01 	lds	r30, 0x016A
    18ae:	f0 91 6b 01 	lds	r31, 0x016B
    18b2:	09 95       	icall
		}
	}
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	ff 91       	pop	r31
    18ba:	ef 91       	pop	r30
    18bc:	bf 91       	pop	r27
    18be:	af 91       	pop	r26
    18c0:	9f 91       	pop	r25
    18c2:	8f 91       	pop	r24
    18c4:	7f 91       	pop	r23
    18c6:	6f 91       	pop	r22
    18c8:	5f 91       	pop	r21
    18ca:	4f 91       	pop	r20
    18cc:	3f 91       	pop	r19
    18ce:	2f 91       	pop	r18
    18d0:	0f 90       	pop	r0
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	0f 90       	pop	r0
    18d6:	1f 90       	pop	r1
    18d8:	18 95       	reti

000018da <__vector_2>:

	//int1
	void __vector_2 (void)
	{
    18da:	1f 92       	push	r1
    18dc:	0f 92       	push	r0
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	0f 92       	push	r0
    18e2:	11 24       	eor	r1, r1
    18e4:	2f 93       	push	r18
    18e6:	3f 93       	push	r19
    18e8:	4f 93       	push	r20
    18ea:	5f 93       	push	r21
    18ec:	6f 93       	push	r22
    18ee:	7f 93       	push	r23
    18f0:	8f 93       	push	r24
    18f2:	9f 93       	push	r25
    18f4:	af 93       	push	r26
    18f6:	bf 93       	push	r27
    18f8:	ef 93       	push	r30
    18fa:	ff 93       	push	r31
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
		if (EXTI_pFunISR1Fun != NULL)
    1904:	80 91 6c 01 	lds	r24, 0x016C
    1908:	90 91 6d 01 	lds	r25, 0x016D
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	29 f0       	breq	.+10     	; 0x191a <__vector_2+0x40>
				{
					EXTI_pFunISR1Fun ();
    1910:	e0 91 6c 01 	lds	r30, 0x016C
    1914:	f0 91 6d 01 	lds	r31, 0x016D
    1918:	09 95       	icall
				}
	}
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	ff 91       	pop	r31
    1920:	ef 91       	pop	r30
    1922:	bf 91       	pop	r27
    1924:	af 91       	pop	r26
    1926:	9f 91       	pop	r25
    1928:	8f 91       	pop	r24
    192a:	7f 91       	pop	r23
    192c:	6f 91       	pop	r22
    192e:	5f 91       	pop	r21
    1930:	4f 91       	pop	r20
    1932:	3f 91       	pop	r19
    1934:	2f 91       	pop	r18
    1936:	0f 90       	pop	r0
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	0f 90       	pop	r0
    193c:	1f 90       	pop	r1
    193e:	18 95       	reti

00001940 <__vector_3>:

	//int2
	void __vector_3 (void)
	{
    1940:	1f 92       	push	r1
    1942:	0f 92       	push	r0
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	0f 92       	push	r0
    1948:	11 24       	eor	r1, r1
    194a:	2f 93       	push	r18
    194c:	3f 93       	push	r19
    194e:	4f 93       	push	r20
    1950:	5f 93       	push	r21
    1952:	6f 93       	push	r22
    1954:	7f 93       	push	r23
    1956:	8f 93       	push	r24
    1958:	9f 93       	push	r25
    195a:	af 93       	push	r26
    195c:	bf 93       	push	r27
    195e:	ef 93       	push	r30
    1960:	ff 93       	push	r31
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
		if (EXTI_pFunISR2Fun != NULL)
    196a:	80 91 6e 01 	lds	r24, 0x016E
    196e:	90 91 6f 01 	lds	r25, 0x016F
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	29 f0       	breq	.+10     	; 0x1980 <__vector_3+0x40>
				{
					EXTI_pFunISR2Fun ();
    1976:	e0 91 6e 01 	lds	r30, 0x016E
    197a:	f0 91 6f 01 	lds	r31, 0x016F
    197e:	09 95       	icall
				}
	}
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	ff 91       	pop	r31
    1986:	ef 91       	pop	r30
    1988:	bf 91       	pop	r27
    198a:	af 91       	pop	r26
    198c:	9f 91       	pop	r25
    198e:	8f 91       	pop	r24
    1990:	7f 91       	pop	r23
    1992:	6f 91       	pop	r22
    1994:	5f 91       	pop	r21
    1996:	4f 91       	pop	r20
    1998:	3f 91       	pop	r19
    199a:	2f 91       	pop	r18
    199c:	0f 90       	pop	r0
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	0f 90       	pop	r0
    19a2:	1f 90       	pop	r1
    19a4:	18 95       	reti

000019a6 <DIO_voidSetPinDirection>:
#include"DIO_priv.h"
#include"DIO_conf.h"



void DIO_voidSetPinDirection(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Direction){
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <DIO_voidSetPinDirection+0x6>
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <DIO_voidSetPinDirection+0x8>
    19ae:	0f 92       	push	r0
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	6a 83       	std	Y+2, r22	; 0x02
    19b8:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7&&Copy_u8Direction<=DIO_u8OUTPUT){
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	84 30       	cpi	r24, 0x04	; 4
    19be:	08 f0       	brcs	.+2      	; 0x19c2 <DIO_voidSetPinDirection+0x1c>
    19c0:	ce c0       	rjmp	.+412    	; 0x1b5e <DIO_voidSetPinDirection+0x1b8>
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	88 30       	cpi	r24, 0x08	; 8
    19c6:	08 f0       	brcs	.+2      	; 0x19ca <DIO_voidSetPinDirection+0x24>
    19c8:	ca c0       	rjmp	.+404    	; 0x1b5e <DIO_voidSetPinDirection+0x1b8>
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	82 30       	cpi	r24, 0x02	; 2
    19ce:	08 f0       	brcs	.+2      	; 0x19d2 <DIO_voidSetPinDirection+0x2c>
    19d0:	c6 c0       	rjmp	.+396    	; 0x1b5e <DIO_voidSetPinDirection+0x1b8>
		switch(Copy_u8GroupID){
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	3d 83       	std	Y+5, r19	; 0x05
    19da:	2c 83       	std	Y+4, r18	; 0x04
    19dc:	6c 81       	ldd	r22, Y+4	; 0x04
    19de:	7d 81       	ldd	r23, Y+5	; 0x05
    19e0:	61 30       	cpi	r22, 0x01	; 1
    19e2:	71 05       	cpc	r23, r1
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <DIO_voidSetPinDirection+0x42>
    19e6:	41 c0       	rjmp	.+130    	; 0x1a6a <DIO_voidSetPinDirection+0xc4>
    19e8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ea:	9d 81       	ldd	r25, Y+5	; 0x05
    19ec:	82 30       	cpi	r24, 0x02	; 2
    19ee:	91 05       	cpc	r25, r1
    19f0:	34 f4       	brge	.+12     	; 0x19fe <DIO_voidSetPinDirection+0x58>
    19f2:	2c 81       	ldd	r18, Y+4	; 0x04
    19f4:	3d 81       	ldd	r19, Y+5	; 0x05
    19f6:	21 15       	cp	r18, r1
    19f8:	31 05       	cpc	r19, r1
    19fa:	71 f0       	breq	.+28     	; 0x1a18 <DIO_voidSetPinDirection+0x72>
    19fc:	b0 c0       	rjmp	.+352    	; 0x1b5e <DIO_voidSetPinDirection+0x1b8>
    19fe:	6c 81       	ldd	r22, Y+4	; 0x04
    1a00:	7d 81       	ldd	r23, Y+5	; 0x05
    1a02:	62 30       	cpi	r22, 0x02	; 2
    1a04:	71 05       	cpc	r23, r1
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <DIO_voidSetPinDirection+0x64>
    1a08:	59 c0       	rjmp	.+178    	; 0x1abc <DIO_voidSetPinDirection+0x116>
    1a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0e:	83 30       	cpi	r24, 0x03	; 3
    1a10:	91 05       	cpc	r25, r1
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <DIO_voidSetPinDirection+0x70>
    1a14:	7c c0       	rjmp	.+248    	; 0x1b0e <DIO_voidSetPinDirection+0x168>
    1a16:	a3 c0       	rjmp	.+326    	; 0x1b5e <DIO_voidSetPinDirection+0x1b8>
		case DIO_u8GROUP_A:
			DDRA &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1a18:	aa e3       	ldi	r26, 0x3A	; 58
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	ea e3       	ldi	r30, 0x3A	; 58
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	48 2f       	mov	r20, r24
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <DIO_voidSetPinDirection+0x8e>
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	2a 95       	dec	r18
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <DIO_voidSetPinDirection+0x8a>
    1a38:	80 95       	com	r24
    1a3a:	84 23       	and	r24, r20
    1a3c:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Direction<<Copy_u8PinID);
    1a3e:	aa e3       	ldi	r26, 0x3A	; 58
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	ea e3       	ldi	r30, 0x3A	; 58
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	b9 01       	movw	r22, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <DIO_voidSetPinDirection+0xb8>
    1a5a:	66 0f       	add	r22, r22
    1a5c:	77 1f       	adc	r23, r23
    1a5e:	8a 95       	dec	r24
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <DIO_voidSetPinDirection+0xb4>
    1a62:	cb 01       	movw	r24, r22
    1a64:	84 2b       	or	r24, r20
    1a66:	8c 93       	st	X, r24
    1a68:	7a c0       	rjmp	.+244    	; 0x1b5e <DIO_voidSetPinDirection+0x1b8>
			break;
		case DIO_u8GROUP_B:
			DDRB &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1a6a:	a7 e3       	ldi	r26, 0x37	; 55
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e7 e3       	ldi	r30, 0x37	; 55
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	48 2f       	mov	r20, r24
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <DIO_voidSetPinDirection+0xe0>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	2a 95       	dec	r18
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <DIO_voidSetPinDirection+0xdc>
    1a8a:	80 95       	com	r24
    1a8c:	84 23       	and	r24, r20
    1a8e:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Direction<<Copy_u8PinID);
    1a90:	a7 e3       	ldi	r26, 0x37	; 55
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e7 e3       	ldi	r30, 0x37	; 55
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	48 2f       	mov	r20, r24
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	88 2f       	mov	r24, r24
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	b9 01       	movw	r22, r18
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <DIO_voidSetPinDirection+0x10a>
    1aac:	66 0f       	add	r22, r22
    1aae:	77 1f       	adc	r23, r23
    1ab0:	8a 95       	dec	r24
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <DIO_voidSetPinDirection+0x106>
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	84 2b       	or	r24, r20
    1ab8:	8c 93       	st	X, r24
    1aba:	51 c0       	rjmp	.+162    	; 0x1b5e <DIO_voidSetPinDirection+0x1b8>
			break;
		case DIO_u8GROUP_C:
			DDRC &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1abc:	a4 e3       	ldi	r26, 0x34	; 52
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e4 e3       	ldi	r30, 0x34	; 52
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	48 2f       	mov	r20, r24
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <DIO_voidSetPinDirection+0x132>
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	2a 95       	dec	r18
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <DIO_voidSetPinDirection+0x12e>
    1adc:	80 95       	com	r24
    1ade:	84 23       	and	r24, r20
    1ae0:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Direction<<Copy_u8PinID);
    1ae2:	a4 e3       	ldi	r26, 0x34	; 52
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e4 e3       	ldi	r30, 0x34	; 52
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	48 2f       	mov	r20, r24
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	88 2f       	mov	r24, r24
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	b9 01       	movw	r22, r18
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <DIO_voidSetPinDirection+0x15c>
    1afe:	66 0f       	add	r22, r22
    1b00:	77 1f       	adc	r23, r23
    1b02:	8a 95       	dec	r24
    1b04:	e2 f7       	brpl	.-8      	; 0x1afe <DIO_voidSetPinDirection+0x158>
    1b06:	cb 01       	movw	r24, r22
    1b08:	84 2b       	or	r24, r20
    1b0a:	8c 93       	st	X, r24
    1b0c:	28 c0       	rjmp	.+80     	; 0x1b5e <DIO_voidSetPinDirection+0x1b8>
			break;
		case DIO_u8GROUP_D:
			DDRD &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1b0e:	a1 e3       	ldi	r26, 0x31	; 49
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e1 e3       	ldi	r30, 0x31	; 49
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <DIO_voidSetPinDirection+0x184>
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	2a 95       	dec	r18
    1b2c:	e2 f7       	brpl	.-8      	; 0x1b26 <DIO_voidSetPinDirection+0x180>
    1b2e:	80 95       	com	r24
    1b30:	84 23       	and	r24, r20
    1b32:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Direction<<Copy_u8PinID);
    1b34:	a1 e3       	ldi	r26, 0x31	; 49
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e1 e3       	ldi	r30, 0x31	; 49
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	48 2f       	mov	r20, r24
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	88 2f       	mov	r24, r24
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	b9 01       	movw	r22, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <DIO_voidSetPinDirection+0x1ae>
    1b50:	66 0f       	add	r22, r22
    1b52:	77 1f       	adc	r23, r23
    1b54:	8a 95       	dec	r24
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <DIO_voidSetPinDirection+0x1aa>
    1b58:	cb 01       	movw	r24, r22
    1b5a:	84 2b       	or	r24, r20
    1b5c:	8c 93       	st	X, r24
		}

	}

	return ;
}
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Value){
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <DIO_voidSetPinValue+0x6>
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <DIO_voidSetPinValue+0x8>
    1b76:	0f 92       	push	r0
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	6a 83       	std	Y+2, r22	; 0x02
    1b80:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7&&DIO_u8HIGH){
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	84 30       	cpi	r24, 0x04	; 4
    1b86:	08 f0       	brcs	.+2      	; 0x1b8a <DIO_voidSetPinValue+0x1c>
    1b88:	ca c0       	rjmp	.+404    	; 0x1d1e <DIO_voidSetPinValue+0x1b0>
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	88 30       	cpi	r24, 0x08	; 8
    1b8e:	08 f0       	brcs	.+2      	; 0x1b92 <DIO_voidSetPinValue+0x24>
    1b90:	c6 c0       	rjmp	.+396    	; 0x1d1e <DIO_voidSetPinValue+0x1b0>
		switch(Copy_u8GroupID){
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	3d 83       	std	Y+5, r19	; 0x05
    1b9a:	2c 83       	std	Y+4, r18	; 0x04
    1b9c:	6c 81       	ldd	r22, Y+4	; 0x04
    1b9e:	7d 81       	ldd	r23, Y+5	; 0x05
    1ba0:	61 30       	cpi	r22, 0x01	; 1
    1ba2:	71 05       	cpc	r23, r1
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <DIO_voidSetPinValue+0x3a>
    1ba6:	41 c0       	rjmp	.+130    	; 0x1c2a <DIO_voidSetPinValue+0xbc>
    1ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    1baa:	9d 81       	ldd	r25, Y+5	; 0x05
    1bac:	82 30       	cpi	r24, 0x02	; 2
    1bae:	91 05       	cpc	r25, r1
    1bb0:	34 f4       	brge	.+12     	; 0x1bbe <DIO_voidSetPinValue+0x50>
    1bb2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb6:	21 15       	cp	r18, r1
    1bb8:	31 05       	cpc	r19, r1
    1bba:	71 f0       	breq	.+28     	; 0x1bd8 <DIO_voidSetPinValue+0x6a>
    1bbc:	b0 c0       	rjmp	.+352    	; 0x1d1e <DIO_voidSetPinValue+0x1b0>
    1bbe:	6c 81       	ldd	r22, Y+4	; 0x04
    1bc0:	7d 81       	ldd	r23, Y+5	; 0x05
    1bc2:	62 30       	cpi	r22, 0x02	; 2
    1bc4:	71 05       	cpc	r23, r1
    1bc6:	09 f4       	brne	.+2      	; 0x1bca <DIO_voidSetPinValue+0x5c>
    1bc8:	59 c0       	rjmp	.+178    	; 0x1c7c <DIO_voidSetPinValue+0x10e>
    1bca:	8c 81       	ldd	r24, Y+4	; 0x04
    1bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bce:	83 30       	cpi	r24, 0x03	; 3
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <DIO_voidSetPinValue+0x68>
    1bd4:	7c c0       	rjmp	.+248    	; 0x1cce <DIO_voidSetPinValue+0x160>
    1bd6:	a3 c0       	rjmp	.+326    	; 0x1d1e <DIO_voidSetPinValue+0x1b0>
		case DIO_u8GROUP_A:
			PORTA &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1bd8:	ab e3       	ldi	r26, 0x3B	; 59
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	eb e3       	ldi	r30, 0x3B	; 59
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <DIO_voidSetPinValue+0x86>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	2a 95       	dec	r18
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <DIO_voidSetPinValue+0x82>
    1bf8:	80 95       	com	r24
    1bfa:	84 23       	and	r24, r20
    1bfc:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
    1bfe:	ab e3       	ldi	r26, 0x3B	; 59
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	eb e3       	ldi	r30, 0x3B	; 59
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	48 2f       	mov	r20, r24
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	b9 01       	movw	r22, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <DIO_voidSetPinValue+0xb0>
    1c1a:	66 0f       	add	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	8a 95       	dec	r24
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <DIO_voidSetPinValue+0xac>
    1c22:	cb 01       	movw	r24, r22
    1c24:	84 2b       	or	r24, r20
    1c26:	8c 93       	st	X, r24
    1c28:	7a c0       	rjmp	.+244    	; 0x1d1e <DIO_voidSetPinValue+0x1b0>
			break;
		case DIO_u8GROUP_B:
			PORTB &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1c2a:	a8 e3       	ldi	r26, 0x38	; 56
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e8 e3       	ldi	r30, 0x38	; 56
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	48 2f       	mov	r20, r24
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <DIO_voidSetPinValue+0xd8>
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	2a 95       	dec	r18
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <DIO_voidSetPinValue+0xd4>
    1c4a:	80 95       	com	r24
    1c4c:	84 23       	and	r24, r20
    1c4e:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
    1c50:	a8 e3       	ldi	r26, 0x38	; 56
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e8 e3       	ldi	r30, 0x38	; 56
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	88 2f       	mov	r24, r24
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	b9 01       	movw	r22, r18
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <DIO_voidSetPinValue+0x102>
    1c6c:	66 0f       	add	r22, r22
    1c6e:	77 1f       	adc	r23, r23
    1c70:	8a 95       	dec	r24
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <DIO_voidSetPinValue+0xfe>
    1c74:	cb 01       	movw	r24, r22
    1c76:	84 2b       	or	r24, r20
    1c78:	8c 93       	st	X, r24
    1c7a:	51 c0       	rjmp	.+162    	; 0x1d1e <DIO_voidSetPinValue+0x1b0>
		 break;
		case DIO_u8GROUP_C:
			PORTC &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1c7c:	a5 e3       	ldi	r26, 0x35	; 53
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e5 e3       	ldi	r30, 0x35	; 53
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	48 2f       	mov	r20, r24
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <DIO_voidSetPinValue+0x12a>
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	2a 95       	dec	r18
    1c9a:	e2 f7       	brpl	.-8      	; 0x1c94 <DIO_voidSetPinValue+0x126>
    1c9c:	80 95       	com	r24
    1c9e:	84 23       	and	r24, r20
    1ca0:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
    1ca2:	a5 e3       	ldi	r26, 0x35	; 53
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e5 e3       	ldi	r30, 0x35	; 53
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	48 2f       	mov	r20, r24
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	88 2f       	mov	r24, r24
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	b9 01       	movw	r22, r18
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <DIO_voidSetPinValue+0x154>
    1cbe:	66 0f       	add	r22, r22
    1cc0:	77 1f       	adc	r23, r23
    1cc2:	8a 95       	dec	r24
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <DIO_voidSetPinValue+0x150>
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	84 2b       	or	r24, r20
    1cca:	8c 93       	st	X, r24
    1ccc:	28 c0       	rjmp	.+80     	; 0x1d1e <DIO_voidSetPinValue+0x1b0>
			break;
		case DIO_u8GROUP_D:
			PORTD &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1cce:	a2 e3       	ldi	r26, 0x32	; 50
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e2 e3       	ldi	r30, 0x32	; 50
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	48 2f       	mov	r20, r24
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <DIO_voidSetPinValue+0x17c>
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	2a 95       	dec	r18
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <DIO_voidSetPinValue+0x178>
    1cee:	80 95       	com	r24
    1cf0:	84 23       	and	r24, r20
    1cf2:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
    1cf4:	a2 e3       	ldi	r26, 0x32	; 50
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e2 e3       	ldi	r30, 0x32	; 50
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	48 2f       	mov	r20, r24
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	88 2f       	mov	r24, r24
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	b9 01       	movw	r22, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <DIO_voidSetPinValue+0x1a6>
    1d10:	66 0f       	add	r22, r22
    1d12:	77 1f       	adc	r23, r23
    1d14:	8a 95       	dec	r24
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <DIO_voidSetPinValue+0x1a2>
    1d18:	cb 01       	movw	r24, r22
    1d1a:	84 2b       	or	r24, r20
    1d1c:	8c 93       	st	X, r24
			break;
		}
	}

	return ;
}
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID){
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	00 d0       	rcall	.+0      	; 0x1d34 <DIO_voidTogglePinValue+0x6>
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <DIO_voidTogglePinValue+0x8>
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7){
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	84 30       	cpi	r24, 0x04	; 4
    1d42:	08 f0       	brcs	.+2      	; 0x1d46 <DIO_voidTogglePinValue+0x18>
    1d44:	72 c0       	rjmp	.+228    	; 0x1e2a <DIO_voidTogglePinValue+0xfc>
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	88 30       	cpi	r24, 0x08	; 8
    1d4a:	08 f0       	brcs	.+2      	; 0x1d4e <DIO_voidTogglePinValue+0x20>
    1d4c:	6e c0       	rjmp	.+220    	; 0x1e2a <DIO_voidTogglePinValue+0xfc>
		switch(Copy_u8GroupID){
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	3c 83       	std	Y+4, r19	; 0x04
    1d56:	2b 83       	std	Y+3, r18	; 0x03
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	91 05       	cpc	r25, r1
    1d60:	49 f1       	breq	.+82     	; 0x1db4 <DIO_voidTogglePinValue+0x86>
    1d62:	2b 81       	ldd	r18, Y+3	; 0x03
    1d64:	3c 81       	ldd	r19, Y+4	; 0x04
    1d66:	22 30       	cpi	r18, 0x02	; 2
    1d68:	31 05       	cpc	r19, r1
    1d6a:	2c f4       	brge	.+10     	; 0x1d76 <DIO_voidTogglePinValue+0x48>
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	61 f0       	breq	.+24     	; 0x1d8c <DIO_voidTogglePinValue+0x5e>
    1d74:	5a c0       	rjmp	.+180    	; 0x1e2a <DIO_voidTogglePinValue+0xfc>
    1d76:	2b 81       	ldd	r18, Y+3	; 0x03
    1d78:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7a:	22 30       	cpi	r18, 0x02	; 2
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	71 f1       	breq	.+92     	; 0x1ddc <DIO_voidTogglePinValue+0xae>
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	9c 81       	ldd	r25, Y+4	; 0x04
    1d84:	83 30       	cpi	r24, 0x03	; 3
    1d86:	91 05       	cpc	r25, r1
    1d88:	e9 f1       	breq	.+122    	; 0x1e04 <DIO_voidTogglePinValue+0xd6>
    1d8a:	4f c0       	rjmp	.+158    	; 0x1e2a <DIO_voidTogglePinValue+0xfc>
		case DIO_u8GROUP_A:
			PORTA ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    1d8c:	ab e3       	ldi	r26, 0x3B	; 59
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	eb e3       	ldi	r30, 0x3B	; 59
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	48 2f       	mov	r20, r24
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	02 2e       	mov	r0, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <DIO_voidTogglePinValue+0x7c>
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	0a 94       	dec	r0
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <DIO_voidTogglePinValue+0x78>
    1dae:	84 27       	eor	r24, r20
    1db0:	8c 93       	st	X, r24
    1db2:	3b c0       	rjmp	.+118    	; 0x1e2a <DIO_voidTogglePinValue+0xfc>
			break;
		case DIO_u8GROUP_B:
		   PORTB ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    1db4:	a8 e3       	ldi	r26, 0x38	; 56
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e8 e3       	ldi	r30, 0x38	; 56
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	48 2f       	mov	r20, r24
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 2e       	mov	r0, r18
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <DIO_voidTogglePinValue+0xa4>
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	0a 94       	dec	r0
    1dd4:	e2 f7       	brpl	.-8      	; 0x1dce <DIO_voidTogglePinValue+0xa0>
    1dd6:	84 27       	eor	r24, r20
    1dd8:	8c 93       	st	X, r24
    1dda:	27 c0       	rjmp	.+78     	; 0x1e2a <DIO_voidTogglePinValue+0xfc>
		   break;
		case DIO_u8GROUP_C:
			PORTC ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    1ddc:	a5 e3       	ldi	r26, 0x35	; 53
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e5 e3       	ldi	r30, 0x35	; 53
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	48 2f       	mov	r20, r24
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	02 2e       	mov	r0, r18
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <DIO_voidTogglePinValue+0xcc>
    1df6:	88 0f       	add	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	0a 94       	dec	r0
    1dfc:	e2 f7       	brpl	.-8      	; 0x1df6 <DIO_voidTogglePinValue+0xc8>
    1dfe:	84 27       	eor	r24, r20
    1e00:	8c 93       	st	X, r24
    1e02:	13 c0       	rjmp	.+38     	; 0x1e2a <DIO_voidTogglePinValue+0xfc>
			break;
		case DIO_u8GROUP_D:
			PORTD ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    1e04:	a2 e3       	ldi	r26, 0x32	; 50
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e2 e3       	ldi	r30, 0x32	; 50
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	48 2f       	mov	r20, r24
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 2e       	mov	r0, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <DIO_voidTogglePinValue+0xf4>
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	0a 94       	dec	r0
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <DIO_voidTogglePinValue+0xf0>
    1e26:	84 27       	eor	r24, r20
    1e28:	8c 93       	st	X, r24

		}
	}

	return ;
}
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <DIO_voidGetPinValue>:

void DIO_voidGetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 * Copy_pu8Value){
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <DIO_voidGetPinValue+0x6>
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <DIO_voidGetPinValue+0x8>
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <DIO_voidGetPinValue+0xa>
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	6a 83       	std	Y+2, r22	; 0x02
    1e4a:	5c 83       	std	Y+4, r21	; 0x04
    1e4c:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7){
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	84 30       	cpi	r24, 0x04	; 4
    1e52:	08 f0       	brcs	.+2      	; 0x1e56 <DIO_voidGetPinValue+0x1e>
    1e54:	74 c0       	rjmp	.+232    	; 0x1f3e <DIO_voidGetPinValue+0x106>
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	88 30       	cpi	r24, 0x08	; 8
    1e5a:	08 f0       	brcs	.+2      	; 0x1e5e <DIO_voidGetPinValue+0x26>
    1e5c:	70 c0       	rjmp	.+224    	; 0x1f3e <DIO_voidGetPinValue+0x106>
		switch (Copy_u8GroupID){
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	3e 83       	std	Y+6, r19	; 0x06
    1e66:	2d 83       	std	Y+5, r18	; 0x05
    1e68:	4d 81       	ldd	r20, Y+5	; 0x05
    1e6a:	5e 81       	ldd	r21, Y+6	; 0x06
    1e6c:	41 30       	cpi	r20, 0x01	; 1
    1e6e:	51 05       	cpc	r21, r1
    1e70:	59 f1       	breq	.+86     	; 0x1ec8 <DIO_voidGetPinValue+0x90>
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	9e 81       	ldd	r25, Y+6	; 0x06
    1e76:	82 30       	cpi	r24, 0x02	; 2
    1e78:	91 05       	cpc	r25, r1
    1e7a:	34 f4       	brge	.+12     	; 0x1e88 <DIO_voidGetPinValue+0x50>
    1e7c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e7e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e80:	21 15       	cp	r18, r1
    1e82:	31 05       	cpc	r19, r1
    1e84:	69 f0       	breq	.+26     	; 0x1ea0 <DIO_voidGetPinValue+0x68>
    1e86:	5b c0       	rjmp	.+182    	; 0x1f3e <DIO_voidGetPinValue+0x106>
    1e88:	4d 81       	ldd	r20, Y+5	; 0x05
    1e8a:	5e 81       	ldd	r21, Y+6	; 0x06
    1e8c:	42 30       	cpi	r20, 0x02	; 2
    1e8e:	51 05       	cpc	r21, r1
    1e90:	79 f1       	breq	.+94     	; 0x1ef0 <DIO_voidGetPinValue+0xb8>
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	9e 81       	ldd	r25, Y+6	; 0x06
    1e96:	83 30       	cpi	r24, 0x03	; 3
    1e98:	91 05       	cpc	r25, r1
    1e9a:	09 f4       	brne	.+2      	; 0x1e9e <DIO_voidGetPinValue+0x66>
    1e9c:	3d c0       	rjmp	.+122    	; 0x1f18 <DIO_voidGetPinValue+0xe0>
    1e9e:	4f c0       	rjmp	.+158    	; 0x1f3e <DIO_voidGetPinValue+0x106>
		case DIO_u8GROUP_A:
			*Copy_pu8Value=(PINA>>Copy_u8PinID)&DIO_u8BIT_MASK;
    1ea0:	e9 e3       	ldi	r30, 0x39	; 57
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	a9 01       	movw	r20, r18
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <DIO_voidGetPinValue+0x80>
    1eb4:	55 95       	asr	r21
    1eb6:	47 95       	ror	r20
    1eb8:	8a 95       	dec	r24
    1eba:	e2 f7       	brpl	.-8      	; 0x1eb4 <DIO_voidGetPinValue+0x7c>
    1ebc:	ca 01       	movw	r24, r20
    1ebe:	81 70       	andi	r24, 0x01	; 1
    1ec0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec4:	80 83       	st	Z, r24
    1ec6:	3b c0       	rjmp	.+118    	; 0x1f3e <DIO_voidGetPinValue+0x106>
			break;
		case DIO_u8GROUP_B:
			*Copy_pu8Value=(PINB>>Copy_u8PinID)&DIO_u8BIT_MASK;
    1ec8:	e6 e3       	ldi	r30, 0x36	; 54
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	88 2f       	mov	r24, r24
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	a9 01       	movw	r20, r18
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <DIO_voidGetPinValue+0xa8>
    1edc:	55 95       	asr	r21
    1ede:	47 95       	ror	r20
    1ee0:	8a 95       	dec	r24
    1ee2:	e2 f7       	brpl	.-8      	; 0x1edc <DIO_voidGetPinValue+0xa4>
    1ee4:	ca 01       	movw	r24, r20
    1ee6:	81 70       	andi	r24, 0x01	; 1
    1ee8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eea:	fc 81       	ldd	r31, Y+4	; 0x04
    1eec:	80 83       	st	Z, r24
    1eee:	27 c0       	rjmp	.+78     	; 0x1f3e <DIO_voidGetPinValue+0x106>
			break;
		case DIO_u8GROUP_C:
			*Copy_pu8Value=(PINC>>Copy_u8PinID)&DIO_u8BIT_MASK;
    1ef0:	e3 e3       	ldi	r30, 0x33	; 51
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	88 2f       	mov	r24, r24
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a9 01       	movw	r20, r18
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <DIO_voidGetPinValue+0xd0>
    1f04:	55 95       	asr	r21
    1f06:	47 95       	ror	r20
    1f08:	8a 95       	dec	r24
    1f0a:	e2 f7       	brpl	.-8      	; 0x1f04 <DIO_voidGetPinValue+0xcc>
    1f0c:	ca 01       	movw	r24, r20
    1f0e:	81 70       	andi	r24, 0x01	; 1
    1f10:	eb 81       	ldd	r30, Y+3	; 0x03
    1f12:	fc 81       	ldd	r31, Y+4	; 0x04
    1f14:	80 83       	st	Z, r24
    1f16:	13 c0       	rjmp	.+38     	; 0x1f3e <DIO_voidGetPinValue+0x106>
			break;
		case DIO_u8GROUP_D:
			*Copy_pu8Value=(PIND>>Copy_u8PinID)&DIO_u8BIT_MASK;
    1f18:	e0 e3       	ldi	r30, 0x30	; 48
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	88 2f       	mov	r24, r24
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	a9 01       	movw	r20, r18
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <DIO_voidGetPinValue+0xf8>
    1f2c:	55 95       	asr	r21
    1f2e:	47 95       	ror	r20
    1f30:	8a 95       	dec	r24
    1f32:	e2 f7       	brpl	.-8      	; 0x1f2c <DIO_voidGetPinValue+0xf4>
    1f34:	ca 01       	movw	r24, r20
    1f36:	81 70       	andi	r24, 0x01	; 1
    1f38:	eb 81       	ldd	r30, Y+3	; 0x03
    1f3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f3c:	80 83       	st	Z, r24

		}
	}

	return;
}
    1f3e:	26 96       	adiw	r28, 0x06	; 6
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <ADC_voidInit>:

static void(*ADC_pFunISRFun)(void) =NULL;


void ADC_voidInit(void)
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &= 0xF8;
    1f58:	a6 e2       	ldi	r26, 0x26	; 38
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e6 e2       	ldi	r30, 0x26	; 38
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	88 7f       	andi	r24, 0xF8	; 248
    1f64:	8c 93       	st	X, r24
#if ADC_PRES == PRES_64
	ADCSRA |= 6;
    1f66:	a6 e2       	ldi	r26, 0x26	; 38
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e6 e2       	ldi	r30, 0x26	; 38
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	86 60       	ori	r24, 0x06	; 6
    1f72:	8c 93       	st	X, r24
#endif

	ADMUX &= 0x3F;
    1f74:	a7 e2       	ldi	r26, 0x27	; 39
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	e7 e2       	ldi	r30, 0x27	; 39
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	8f 73       	andi	r24, 0x3F	; 63
    1f80:	8c 93       	st	X, r24
#if ADC_VREF == AVCC_REF
	ADMUX |= (1<<6);
    1f82:	a7 e2       	ldi	r26, 0x27	; 39
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e7 e2       	ldi	r30, 0x27	; 39
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	80 64       	ori	r24, 0x40	; 64
    1f8e:	8c 93       	st	X, r24
#endif

#if ADC_ADJUST == LEFT_ADJUST
	ADMUX |= (1<<5);
    1f90:	a7 e2       	ldi	r26, 0x27	; 39
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e7 e2       	ldi	r30, 0x27	; 39
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	80 62       	ori	r24, 0x20	; 32
    1f9c:	8c 93       	st	X, r24
#endif

#if INIT_CHNNL >=0 && INIT_CHNNL <=31
	ADMUX &= 0xE0;
    1f9e:	a7 e2       	ldi	r26, 0x27	; 39
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e7 e2       	ldi	r30, 0x27	; 39
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	80 7e       	andi	r24, 0xE0	; 224
    1faa:	8c 93       	st	X, r24
	ADMUX |= INIT_CHNNL;
    1fac:	a7 e2       	ldi	r26, 0x27	; 39
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e7 e2       	ldi	r30, 0x27	; 39
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	8c 93       	st	X, r24
#endif

#if ADC_INTERRUPT_MODE == INTERRUPT
	ADCSRA |= (1<<3);
#elif ADC_INTERRUPT_MODE == POLLING
	ADCSRA &=~ (1<<3);
    1fb8:	a6 e2       	ldi	r26, 0x26	; 38
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e6 e2       	ldi	r30, 0x26	; 38
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	87 7f       	andi	r24, 0xF7	; 247
    1fc4:	8c 93       	st	X, r24
#endif

#if ADC_TRIGGER_SOURCE == SINGLE
	ADCSRA &= ~(1<<5);
    1fc6:	a6 e2       	ldi	r26, 0x26	; 38
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e6 e2       	ldi	r30, 0x26	; 38
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	8f 7d       	andi	r24, 0xDF	; 223
    1fd2:	8c 93       	st	X, r24
#endif

	//enable ADC peripheral
	ADCSRA |= (1<<7);
    1fd4:	a6 e2       	ldi	r26, 0x26	; 38
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e6 e2       	ldi	r30, 0x26	; 38
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	80 68       	ori	r24, 0x80	; 128
    1fe0:	8c 93       	st	X, r24

	return ;
}
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <ADC_voidSelectChannel>:
void ADC_voidSelectChannel(u8 Copy_u8ChannelID)
{
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	0f 92       	push	r0
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8ChannelID < 32 )
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	80 32       	cpi	r24, 0x20	; 32
    1ff8:	78 f4       	brcc	.+30     	; 0x2018 <ADC_voidSelectChannel+0x30>
	{
		ADMUX &= 0xE0; // ADMUX &= ~ 0x1F; //ADMUX &= ~(31<<0) ;
    1ffa:	a7 e2       	ldi	r26, 0x27	; 39
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e7 e2       	ldi	r30, 0x27	; 39
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	80 7e       	andi	r24, 0xE0	; 224
    2006:	8c 93       	st	X, r24
		ADMUX |= Copy_u8ChannelID;
    2008:	a7 e2       	ldi	r26, 0x27	; 39
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e7 e2       	ldi	r30, 0x27	; 39
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	90 81       	ld	r25, Z
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	89 2b       	or	r24, r25
    2016:	8c 93       	st	X, r24
	}

	return;
}
    2018:	0f 90       	pop	r0
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <ADC_voidStartConversion>:
void ADC_voidStartConversion(void)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62

	ADCSRA |= (1<<6);
    2028:	a6 e2       	ldi	r26, 0x26	; 38
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e6 e2       	ldi	r30, 0x26	; 38
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	80 64       	ori	r24, 0x40	; 64
    2034:	8c 93       	st	X, r24

	return ;
}
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <ADC_voidEnableAutoTrigger>:
void ADC_voidEnableAutoTrigger(u8 Copy_u8TiggerSource)
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	0f 92       	push	r0
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	89 83       	std	Y+1, r24	; 0x01


	if (Copy_u8TiggerSource <= 7)
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	88 30       	cpi	r24, 0x08	; 8
    204c:	40 f5       	brcc	.+80     	; 0x209e <ADC_voidEnableAutoTrigger+0x62>
	{
		ADCSRA &=~(1<<5);
    204e:	a6 e2       	ldi	r26, 0x26	; 38
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e6 e2       	ldi	r30, 0x26	; 38
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	8f 7d       	andi	r24, 0xDF	; 223
    205a:	8c 93       	st	X, r24

		SFIOR &= 0x1F ; // SFIOR &= ~0xE0 ; SFIOR &= ~(7<<5) ;
    205c:	a0 e5       	ldi	r26, 0x50	; 80
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e0 e5       	ldi	r30, 0x50	; 80
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	8f 71       	andi	r24, 0x1F	; 31
    2068:	8c 93       	st	X, r24
		SFIOR |= (Copy_u8TiggerSource << 5);
    206a:	a0 e5       	ldi	r26, 0x50	; 80
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e0 e5       	ldi	r30, 0x50	; 80
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	28 2f       	mov	r18, r24
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	88 2f       	mov	r24, r24
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	88 0f       	add	r24, r24
    207e:	99 1f       	adc	r25, r25
    2080:	82 95       	swap	r24
    2082:	92 95       	swap	r25
    2084:	90 7f       	andi	r25, 0xF0	; 240
    2086:	98 27       	eor	r25, r24
    2088:	80 7f       	andi	r24, 0xF0	; 240
    208a:	98 27       	eor	r25, r24
    208c:	82 2b       	or	r24, r18
    208e:	8c 93       	st	X, r24

		ADCSRA |= (1<<5);
    2090:	a6 e2       	ldi	r26, 0x26	; 38
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e6 e2       	ldi	r30, 0x26	; 38
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	80 62       	ori	r24, 0x20	; 32
    209c:	8c 93       	st	X, r24
	}

	return;
}
    209e:	0f 90       	pop	r0
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <ADC_voidDisableAutoTrigger>:

void ADC_voidDisableAutoTrigger(void)
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &=~(1<<5);
    20ae:	a6 e2       	ldi	r26, 0x26	; 38
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e6 e2       	ldi	r30, 0x26	; 38
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	8f 7d       	andi	r24, 0xDF	; 223
    20ba:	8c 93       	st	X, r24
	return;
}
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <ADC_voidRead>:

void ADC_voidRead(u16 * Copy_u16ADCValue)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <ADC_voidRead+0x6>
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	9a 83       	std	Y+2, r25	; 0x02
    20ce:	89 83       	std	Y+1, r24	; 0x01

#if ADC_ADJUST == RIGHT_ADJUST
	*Copy_u16ADCValue  = ADCL;
	*Copy_u16ADCValue |= ((u16)ADCH << 8);
#elif ADC_ADJUST == LEFT_ADJUST
	*Copy_u16ADCValue  = (ADCL>>6);
    20d0:	e4 e2       	ldi	r30, 0x24	; 36
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	82 95       	swap	r24
    20d8:	86 95       	lsr	r24
    20da:	86 95       	lsr	r24
    20dc:	83 70       	andi	r24, 0x03	; 3
    20de:	88 2f       	mov	r24, r24
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	e9 81       	ldd	r30, Y+1	; 0x01
    20e4:	fa 81       	ldd	r31, Y+2	; 0x02
    20e6:	91 83       	std	Z+1, r25	; 0x01
    20e8:	80 83       	st	Z, r24
	*Copy_u16ADCValue |= ((u16)ADCH<<2);
    20ea:	e9 81       	ldd	r30, Y+1	; 0x01
    20ec:	fa 81       	ldd	r31, Y+2	; 0x02
    20ee:	20 81       	ld	r18, Z
    20f0:	31 81       	ldd	r19, Z+1	; 0x01
    20f2:	e5 e2       	ldi	r30, 0x25	; 37
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	88 2f       	mov	r24, r24
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	88 0f       	add	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	82 2b       	or	r24, r18
    2106:	93 2b       	or	r25, r19
    2108:	e9 81       	ldd	r30, Y+1	; 0x01
    210a:	fa 81       	ldd	r31, Y+2	; 0x02
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
#else
#error"ADC adjustment is wrong"
#endif

	return ;
}
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <ADC_voidReadHigh>:

void ADC_voidReadHigh(u8 * Copy_u8ADCValue)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	00 d0       	rcall	.+0      	; 0x2120 <ADC_voidReadHigh+0x6>
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	9a 83       	std	Y+2, r25	; 0x02
    2126:	89 83       	std	Y+1, r24	; 0x01
#if ADC_ADJUST == RIGHT_ADJUST
	*Copy_u8ADCValue  = (ADCL>>2);
	*Copy_u8ADCValue |= ((u16)ADCH << 6);
#warning "to high resolution, it should be left adjust, but now it works"
#elif ADC_ADJUST == LEFT_ADJUST
	*Copy_u8ADCValue  = ADCH;
    2128:	e5 e2       	ldi	r30, 0x25	; 37
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	e9 81       	ldd	r30, Y+1	; 0x01
    2130:	fa 81       	ldd	r31, Y+2	; 0x02
    2132:	80 83       	st	Z, r24
#else
#error"ADC adjustment is wrong"
#endif

	return;
}
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <ADC_voidPollingRead>:

void ADC_voidPollingRead(u16 * Copy_u16ADCValue)
{
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	00 d0       	rcall	.+0      	; 0x2144 <ADC_voidPollingRead+0x6>
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	9a 83       	std	Y+2, r25	; 0x02
    214a:	89 83       	std	Y+1, r24	; 0x01

	while (! ((ADCSRA >> 4) & 1 ));
    214c:	e6 e2       	ldi	r30, 0x26	; 38
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	82 95       	swap	r24
    2154:	8f 70       	andi	r24, 0x0F	; 15
    2156:	88 2f       	mov	r24, r24
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	81 70       	andi	r24, 0x01	; 1
    215c:	90 70       	andi	r25, 0x00	; 0
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	a9 f3       	breq	.-22     	; 0x214c <ADC_voidPollingRead+0xe>

#if ADC_ADJUST == RIGHT_ADJUST
	*Copy_u16ADCValue  = ADCL;
	*Copy_u16ADCValue |= ((u16)ADCH << 8);
#elif ADC_ADJUST == LEFT_ADJUST
	*Copy_u16ADCValue  = (ADCL>>6);
    2162:	e4 e2       	ldi	r30, 0x24	; 36
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	82 95       	swap	r24
    216a:	86 95       	lsr	r24
    216c:	86 95       	lsr	r24
    216e:	83 70       	andi	r24, 0x03	; 3
    2170:	88 2f       	mov	r24, r24
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	e9 81       	ldd	r30, Y+1	; 0x01
    2176:	fa 81       	ldd	r31, Y+2	; 0x02
    2178:	91 83       	std	Z+1, r25	; 0x01
    217a:	80 83       	st	Z, r24
	*Copy_u16ADCValue |= ((u16)ADCH<<2);
    217c:	e9 81       	ldd	r30, Y+1	; 0x01
    217e:	fa 81       	ldd	r31, Y+2	; 0x02
    2180:	20 81       	ld	r18, Z
    2182:	31 81       	ldd	r19, Z+1	; 0x01
    2184:	e5 e2       	ldi	r30, 0x25	; 37
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	88 0f       	add	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	82 2b       	or	r24, r18
    2198:	93 2b       	or	r25, r19
    219a:	e9 81       	ldd	r30, Y+1	; 0x01
    219c:	fa 81       	ldd	r31, Y+2	; 0x02
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	80 83       	st	Z, r24
//#warning "to read full resolution, it should be right adjust, but now it works"
#else
#error"ADC adjustment is wrong"
#endif

	ADCSRA |= (1<<4);
    21a2:	a6 e2       	ldi	r26, 0x26	; 38
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e6 e2       	ldi	r30, 0x26	; 38
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	80 61       	ori	r24, 0x10	; 16
    21ae:	8c 93       	st	X, r24

	return;
}
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <ADC_voidCallBack>:

void ADC_voidCallBack(void (* Copy_pFunAppFun)(void))
{
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <ADC_voidCallBack+0x6>
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	9a 83       	std	Y+2, r25	; 0x02
    21c6:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pFunAppFun != NULL)
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	9a 81       	ldd	r25, Y+2	; 0x02
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	31 f0       	breq	.+12     	; 0x21dc <ADC_voidCallBack+0x22>
	{
		ADC_pFunISRFun = Copy_pFunAppFun;
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	9a 81       	ldd	r25, Y+2	; 0x02
    21d4:	90 93 71 01 	sts	0x0171, r25
    21d8:	80 93 70 01 	sts	0x0170, r24
	}

	return;
}
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <ADC_voidEnableInterrupt>:




void ADC_voidEnableInterrupt(void)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62

	ADCSRA |= (1<<3);
    21ee:	a6 e2       	ldi	r26, 0x26	; 38
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	e6 e2       	ldi	r30, 0x26	; 38
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	88 60       	ori	r24, 0x08	; 8
    21fa:	8c 93       	st	X, r24

	return;
}
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <__vector_16>:



void __vector_16(void)__attribute__((signal));
void __vector_16(void)
{
    2202:	1f 92       	push	r1
    2204:	0f 92       	push	r0
    2206:	0f b6       	in	r0, 0x3f	; 63
    2208:	0f 92       	push	r0
    220a:	11 24       	eor	r1, r1
    220c:	2f 93       	push	r18
    220e:	3f 93       	push	r19
    2210:	4f 93       	push	r20
    2212:	5f 93       	push	r21
    2214:	6f 93       	push	r22
    2216:	7f 93       	push	r23
    2218:	8f 93       	push	r24
    221a:	9f 93       	push	r25
    221c:	af 93       	push	r26
    221e:	bf 93       	push	r27
    2220:	ef 93       	push	r30
    2222:	ff 93       	push	r31
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
	if (ADC_pFunISRFun != NULL)
    222c:	80 91 70 01 	lds	r24, 0x0170
    2230:	90 91 71 01 	lds	r25, 0x0171
    2234:	00 97       	sbiw	r24, 0x00	; 0
    2236:	29 f0       	breq	.+10     	; 0x2242 <__vector_16+0x40>
	{
		ADC_pFunISRFun (  );
    2238:	e0 91 70 01 	lds	r30, 0x0170
    223c:	f0 91 71 01 	lds	r31, 0x0171
    2240:	09 95       	icall
	}
}
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	ff 91       	pop	r31
    2248:	ef 91       	pop	r30
    224a:	bf 91       	pop	r27
    224c:	af 91       	pop	r26
    224e:	9f 91       	pop	r25
    2250:	8f 91       	pop	r24
    2252:	7f 91       	pop	r23
    2254:	6f 91       	pop	r22
    2256:	5f 91       	pop	r21
    2258:	4f 91       	pop	r20
    225a:	3f 91       	pop	r19
    225c:	2f 91       	pop	r18
    225e:	0f 90       	pop	r0
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	0f 90       	pop	r0
    2264:	1f 90       	pop	r1
    2266:	18 95       	reti

00002268 <TEMP_SENSOR_voidInit>:
#include"TEMP_SENSOR_priv.h"
#include"TEMP_SENSOR_conf.h"
#include"../../MCAL/ADC/ADC_int.h"
u16 read;

void TEMP_SENSOR_voidInit(void){
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62

	ADC_voidInit();
    2270:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <ADC_voidInit>
	ADC_voidStartConversion();
    2274:	0e 94 10 10 	call	0x2020	; 0x2020 <ADC_voidStartConversion>
	ADC_voidPollingRead(&read);
    2278:	84 e7       	ldi	r24, 0x74	; 116
    227a:	91 e0       	ldi	r25, 0x01	; 1
    227c:	0e 94 9f 10 	call	0x213e	; 0x213e <ADC_voidPollingRead>
	return ;
}
    2280:	cf 91       	pop	r28
    2282:	df 91       	pop	r29
    2284:	08 95       	ret

00002286 <TEMP_SENSOR_u16Read>:
u16 TEMP_SENSOR_u16Read(void){
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62


	ADC_voidStartConversion();
    228e:	0e 94 10 10 	call	0x2020	; 0x2020 <ADC_voidStartConversion>
	ADC_voidPollingRead(&read);
    2292:	84 e7       	ldi	r24, 0x74	; 116
    2294:	91 e0       	ldi	r25, 0x01	; 1
    2296:	0e 94 9f 10 	call	0x213e	; 0x213e <ADC_voidPollingRead>

	read=(read*500ul)/1024;
    229a:	80 91 74 01 	lds	r24, 0x0174
    229e:	90 91 75 01 	lds	r25, 0x0175
    22a2:	cc 01       	movw	r24, r24
    22a4:	a0 e0       	ldi	r26, 0x00	; 0
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	24 ef       	ldi	r18, 0xF4	; 244
    22aa:	31 e0       	ldi	r19, 0x01	; 1
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <__mulsi3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	07 2e       	mov	r0, r23
    22be:	7a e0       	ldi	r23, 0x0A	; 10
    22c0:	b6 95       	lsr	r27
    22c2:	a7 95       	ror	r26
    22c4:	97 95       	ror	r25
    22c6:	87 95       	ror	r24
    22c8:	7a 95       	dec	r23
    22ca:	d1 f7       	brne	.-12     	; 0x22c0 <TEMP_SENSOR_u16Read+0x3a>
    22cc:	70 2d       	mov	r23, r0
    22ce:	90 93 75 01 	sts	0x0175, r25
    22d2:	80 93 74 01 	sts	0x0174, r24

return read;
    22d6:	80 91 74 01 	lds	r24, 0x0174
    22da:	90 91 75 01 	lds	r25, 0x0175

}
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <LCD_voidWriteNLatch>:
#include"../../LIBRARY/stdTypes.h"
#include"../../MCAL/DIO/DIO_int.h"
#include"LCD_priv.h"
#include"LCD_conf.h"
#include<util/delay.h>
void LCD_voidWriteNLatch(u8 Copy_u8Byte){
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    22ec:	e9 97       	sbiw	r28, 0x39	; 57
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue(LCD_u8RW_GROUP,LCD_u8RW_PIN,DIO_u8LOW);
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	67 e0       	ldi	r22, 0x07	; 7
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	63 e0       	ldi	r22, 0x03	; 3
    2308:	40 e0       	ldi	r20, 0x00	; 0
    230a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D3_PIN,(Copy_u8Byte>>3)&DIO_u8BIT_MASK);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D2_PIN,(Copy_u8Byte>>2)&DIO_u8BIT_MASK);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D1_PIN,(Copy_u8Byte>>1)&DIO_u8BIT_MASK);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D0_PIN,(Copy_u8Byte>>0)&DIO_u8BIT_MASK);
#elif LCD_MODE==FOUR_BIT
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,(Copy_u8Byte>>7)&DIO_u8BIT_MASK);
    230e:	89 ad       	ldd	r24, Y+57	; 0x39
    2310:	98 2f       	mov	r25, r24
    2312:	99 1f       	adc	r25, r25
    2314:	99 27       	eor	r25, r25
    2316:	99 1f       	adc	r25, r25
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	67 e0       	ldi	r22, 0x07	; 7
    231c:	49 2f       	mov	r20, r25
    231e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D6_PIN,(Copy_u8Byte>>6)&DIO_u8BIT_MASK);
    2322:	89 ad       	ldd	r24, Y+57	; 0x39
    2324:	82 95       	swap	r24
    2326:	86 95       	lsr	r24
    2328:	86 95       	lsr	r24
    232a:	83 70       	andi	r24, 0x03	; 3
    232c:	98 2f       	mov	r25, r24
    232e:	91 70       	andi	r25, 0x01	; 1
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	66 e0       	ldi	r22, 0x06	; 6
    2334:	49 2f       	mov	r20, r25
    2336:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D5_PIN,(Copy_u8Byte>>5)&DIO_u8BIT_MASK);
    233a:	89 ad       	ldd	r24, Y+57	; 0x39
    233c:	82 95       	swap	r24
    233e:	86 95       	lsr	r24
    2340:	87 70       	andi	r24, 0x07	; 7
    2342:	98 2f       	mov	r25, r24
    2344:	91 70       	andi	r25, 0x01	; 1
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	65 e0       	ldi	r22, 0x05	; 5
    234a:	49 2f       	mov	r20, r25
    234c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D4_PIN,(Copy_u8Byte>>4)&DIO_u8BIT_MASK);
    2350:	89 ad       	ldd	r24, Y+57	; 0x39
    2352:	82 95       	swap	r24
    2354:	8f 70       	andi	r24, 0x0F	; 15
    2356:	98 2f       	mov	r25, r24
    2358:	91 70       	andi	r25, 0x01	; 1
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	64 e0       	ldi	r22, 0x04	; 4
    235e:	49 2f       	mov	r20, r25
    2360:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	63 e0       	ldi	r22, 0x03	; 3
    2368:	41 e0       	ldi	r20, 0x01	; 1
    236a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	a0 e8       	ldi	r26, 0x80	; 128
    2374:	bf e3       	ldi	r27, 0x3F	; 63
    2376:	8d ab       	std	Y+53, r24	; 0x35
    2378:	9e ab       	std	Y+54, r25	; 0x36
    237a:	af ab       	std	Y+55, r26	; 0x37
    237c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237e:	6d a9       	ldd	r22, Y+53	; 0x35
    2380:	7e a9       	ldd	r23, Y+54	; 0x36
    2382:	8f a9       	ldd	r24, Y+55	; 0x37
    2384:	98 ad       	ldd	r25, Y+56	; 0x38
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	4a e7       	ldi	r20, 0x7A	; 122
    238c:	55 e4       	ldi	r21, 0x45	; 69
    238e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	89 ab       	std	Y+49, r24	; 0x31
    2398:	9a ab       	std	Y+50, r25	; 0x32
    239a:	ab ab       	std	Y+51, r26	; 0x33
    239c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    239e:	69 a9       	ldd	r22, Y+49	; 0x31
    23a0:	7a a9       	ldd	r23, Y+50	; 0x32
    23a2:	8b a9       	ldd	r24, Y+51	; 0x33
    23a4:	9c a9       	ldd	r25, Y+52	; 0x34
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e8       	ldi	r20, 0x80	; 128
    23ac:	5f e3       	ldi	r21, 0x3F	; 63
    23ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b2:	88 23       	and	r24, r24
    23b4:	2c f4       	brge	.+10     	; 0x23c0 <LCD_voidWriteNLatch+0xdc>
		__ticks = 1;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	98 ab       	std	Y+48, r25	; 0x30
    23bc:	8f a7       	std	Y+47, r24	; 0x2f
    23be:	3f c0       	rjmp	.+126    	; 0x243e <LCD_voidWriteNLatch+0x15a>
	else if (__tmp > 65535)
    23c0:	69 a9       	ldd	r22, Y+49	; 0x31
    23c2:	7a a9       	ldd	r23, Y+50	; 0x32
    23c4:	8b a9       	ldd	r24, Y+51	; 0x33
    23c6:	9c a9       	ldd	r25, Y+52	; 0x34
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	3f ef       	ldi	r19, 0xFF	; 255
    23cc:	4f e7       	ldi	r20, 0x7F	; 127
    23ce:	57 e4       	ldi	r21, 0x47	; 71
    23d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d4:	18 16       	cp	r1, r24
    23d6:	4c f5       	brge	.+82     	; 0x242a <LCD_voidWriteNLatch+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d8:	6d a9       	ldd	r22, Y+53	; 0x35
    23da:	7e a9       	ldd	r23, Y+54	; 0x36
    23dc:	8f a9       	ldd	r24, Y+55	; 0x37
    23de:	98 ad       	ldd	r25, Y+56	; 0x38
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e2       	ldi	r20, 0x20	; 32
    23e6:	51 e4       	ldi	r21, 0x41	; 65
    23e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	bc 01       	movw	r22, r24
    23f2:	cd 01       	movw	r24, r26
    23f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	98 ab       	std	Y+48, r25	; 0x30
    23fe:	8f a7       	std	Y+47, r24	; 0x2f
    2400:	0f c0       	rjmp	.+30     	; 0x2420 <LCD_voidWriteNLatch+0x13c>
    2402:	80 e9       	ldi	r24, 0x90	; 144
    2404:	91 e0       	ldi	r25, 0x01	; 1
    2406:	9e a7       	std	Y+46, r25	; 0x2e
    2408:	8d a7       	std	Y+45, r24	; 0x2d
    240a:	8d a5       	ldd	r24, Y+45	; 0x2d
    240c:	9e a5       	ldd	r25, Y+46	; 0x2e
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <LCD_voidWriteNLatch+0x12a>
    2412:	9e a7       	std	Y+46, r25	; 0x2e
    2414:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2416:	8f a5       	ldd	r24, Y+47	; 0x2f
    2418:	98 a9       	ldd	r25, Y+48	; 0x30
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	98 ab       	std	Y+48, r25	; 0x30
    241e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2420:	8f a5       	ldd	r24, Y+47	; 0x2f
    2422:	98 a9       	ldd	r25, Y+48	; 0x30
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	69 f7       	brne	.-38     	; 0x2402 <LCD_voidWriteNLatch+0x11e>
    2428:	14 c0       	rjmp	.+40     	; 0x2452 <LCD_voidWriteNLatch+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242a:	69 a9       	ldd	r22, Y+49	; 0x31
    242c:	7a a9       	ldd	r23, Y+50	; 0x32
    242e:	8b a9       	ldd	r24, Y+51	; 0x33
    2430:	9c a9       	ldd	r25, Y+52	; 0x34
    2432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	98 ab       	std	Y+48, r25	; 0x30
    243c:	8f a7       	std	Y+47, r24	; 0x2f
    243e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2440:	98 a9       	ldd	r25, Y+48	; 0x30
    2442:	9c a7       	std	Y+44, r25	; 0x2c
    2444:	8b a7       	std	Y+43, r24	; 0x2b
    2446:	8b a5       	ldd	r24, Y+43	; 0x2b
    2448:	9c a5       	ldd	r25, Y+44	; 0x2c
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <LCD_voidWriteNLatch+0x166>
    244e:	9c a7       	std	Y+44, r25	; 0x2c
    2450:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	63 e0       	ldi	r22, 0x03	; 3
    2456:	40 e0       	ldi	r20, 0x00	; 0
    2458:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	a0 e0       	ldi	r26, 0x00	; 0
    2462:	b0 e4       	ldi	r27, 0x40	; 64
    2464:	8f a3       	std	Y+39, r24	; 0x27
    2466:	98 a7       	std	Y+40, r25	; 0x28
    2468:	a9 a7       	std	Y+41, r26	; 0x29
    246a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246c:	6f a1       	ldd	r22, Y+39	; 0x27
    246e:	78 a5       	ldd	r23, Y+40	; 0x28
    2470:	89 a5       	ldd	r24, Y+41	; 0x29
    2472:	9a a5       	ldd	r25, Y+42	; 0x2a
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	4a e7       	ldi	r20, 0x7A	; 122
    247a:	55 e4       	ldi	r21, 0x45	; 69
    247c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	8b a3       	std	Y+35, r24	; 0x23
    2486:	9c a3       	std	Y+36, r25	; 0x24
    2488:	ad a3       	std	Y+37, r26	; 0x25
    248a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    248c:	6b a1       	ldd	r22, Y+35	; 0x23
    248e:	7c a1       	ldd	r23, Y+36	; 0x24
    2490:	8d a1       	ldd	r24, Y+37	; 0x25
    2492:	9e a1       	ldd	r25, Y+38	; 0x26
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	40 e8       	ldi	r20, 0x80	; 128
    249a:	5f e3       	ldi	r21, 0x3F	; 63
    249c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a0:	88 23       	and	r24, r24
    24a2:	2c f4       	brge	.+10     	; 0x24ae <LCD_voidWriteNLatch+0x1ca>
		__ticks = 1;
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	9a a3       	std	Y+34, r25	; 0x22
    24aa:	89 a3       	std	Y+33, r24	; 0x21
    24ac:	3f c0       	rjmp	.+126    	; 0x252c <LCD_voidWriteNLatch+0x248>
	else if (__tmp > 65535)
    24ae:	6b a1       	ldd	r22, Y+35	; 0x23
    24b0:	7c a1       	ldd	r23, Y+36	; 0x24
    24b2:	8d a1       	ldd	r24, Y+37	; 0x25
    24b4:	9e a1       	ldd	r25, Y+38	; 0x26
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	3f ef       	ldi	r19, 0xFF	; 255
    24ba:	4f e7       	ldi	r20, 0x7F	; 127
    24bc:	57 e4       	ldi	r21, 0x47	; 71
    24be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c2:	18 16       	cp	r1, r24
    24c4:	4c f5       	brge	.+82     	; 0x2518 <LCD_voidWriteNLatch+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c6:	6f a1       	ldd	r22, Y+39	; 0x27
    24c8:	78 a5       	ldd	r23, Y+40	; 0x28
    24ca:	89 a5       	ldd	r24, Y+41	; 0x29
    24cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e2       	ldi	r20, 0x20	; 32
    24d4:	51 e4       	ldi	r21, 0x41	; 65
    24d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	bc 01       	movw	r22, r24
    24e0:	cd 01       	movw	r24, r26
    24e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	9a a3       	std	Y+34, r25	; 0x22
    24ec:	89 a3       	std	Y+33, r24	; 0x21
    24ee:	0f c0       	rjmp	.+30     	; 0x250e <LCD_voidWriteNLatch+0x22a>
    24f0:	80 e9       	ldi	r24, 0x90	; 144
    24f2:	91 e0       	ldi	r25, 0x01	; 1
    24f4:	98 a3       	std	Y+32, r25	; 0x20
    24f6:	8f 8f       	std	Y+31, r24	; 0x1f
    24f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24fa:	98 a1       	ldd	r25, Y+32	; 0x20
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	f1 f7       	brne	.-4      	; 0x24fc <LCD_voidWriteNLatch+0x218>
    2500:	98 a3       	std	Y+32, r25	; 0x20
    2502:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2504:	89 a1       	ldd	r24, Y+33	; 0x21
    2506:	9a a1       	ldd	r25, Y+34	; 0x22
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	9a a3       	std	Y+34, r25	; 0x22
    250c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250e:	89 a1       	ldd	r24, Y+33	; 0x21
    2510:	9a a1       	ldd	r25, Y+34	; 0x22
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	69 f7       	brne	.-38     	; 0x24f0 <LCD_voidWriteNLatch+0x20c>
    2516:	14 c0       	rjmp	.+40     	; 0x2540 <LCD_voidWriteNLatch+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2518:	6b a1       	ldd	r22, Y+35	; 0x23
    251a:	7c a1       	ldd	r23, Y+36	; 0x24
    251c:	8d a1       	ldd	r24, Y+37	; 0x25
    251e:	9e a1       	ldd	r25, Y+38	; 0x26
    2520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	9a a3       	std	Y+34, r25	; 0x22
    252a:	89 a3       	std	Y+33, r24	; 0x21
    252c:	89 a1       	ldd	r24, Y+33	; 0x21
    252e:	9a a1       	ldd	r25, Y+34	; 0x22
    2530:	9e 8f       	std	Y+30, r25	; 0x1e
    2532:	8d 8f       	std	Y+29, r24	; 0x1d
    2534:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2536:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <LCD_voidWriteNLatch+0x254>
    253c:	9e 8f       	std	Y+30, r25	; 0x1e
    253e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,((Copy_u8Byte>>3)&1));
    2540:	89 ad       	ldd	r24, Y+57	; 0x39
    2542:	86 95       	lsr	r24
    2544:	86 95       	lsr	r24
    2546:	86 95       	lsr	r24
    2548:	98 2f       	mov	r25, r24
    254a:	91 70       	andi	r25, 0x01	; 1
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	67 e0       	ldi	r22, 0x07	; 7
    2550:	49 2f       	mov	r20, r25
    2552:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D6_GROUP,LCD_u8D6_PIN,((Copy_u8Byte>>2)&1));
    2556:	89 ad       	ldd	r24, Y+57	; 0x39
    2558:	86 95       	lsr	r24
    255a:	86 95       	lsr	r24
    255c:	98 2f       	mov	r25, r24
    255e:	91 70       	andi	r25, 0x01	; 1
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	66 e0       	ldi	r22, 0x06	; 6
    2564:	49 2f       	mov	r20, r25
    2566:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D5_GROUP,LCD_u8D5_PIN,((Copy_u8Byte>>1)&1));
    256a:	89 ad       	ldd	r24, Y+57	; 0x39
    256c:	86 95       	lsr	r24
    256e:	98 2f       	mov	r25, r24
    2570:	91 70       	andi	r25, 0x01	; 1
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	65 e0       	ldi	r22, 0x05	; 5
    2576:	49 2f       	mov	r20, r25
    2578:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D4_GROUP,LCD_u8D4_PIN,((Copy_u8Byte>>0)&1));
    257c:	89 ad       	ldd	r24, Y+57	; 0x39
    257e:	98 2f       	mov	r25, r24
    2580:	91 70       	andi	r25, 0x01	; 1
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	64 e0       	ldi	r22, 0x04	; 4
    2586:	49 2f       	mov	r20, r25
    2588:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	63 e0       	ldi	r22, 0x03	; 3
    2590:	41 e0       	ldi	r20, 0x01	; 1
    2592:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	a0 e8       	ldi	r26, 0x80	; 128
    259c:	bf e3       	ldi	r27, 0x3F	; 63
    259e:	89 8f       	std	Y+25, r24	; 0x19
    25a0:	9a 8f       	std	Y+26, r25	; 0x1a
    25a2:	ab 8f       	std	Y+27, r26	; 0x1b
    25a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a6:	69 8d       	ldd	r22, Y+25	; 0x19
    25a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	4a e7       	ldi	r20, 0x7A	; 122
    25b4:	55 e4       	ldi	r21, 0x45	; 69
    25b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	8d 8b       	std	Y+21, r24	; 0x15
    25c0:	9e 8b       	std	Y+22, r25	; 0x16
    25c2:	af 8b       	std	Y+23, r26	; 0x17
    25c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25c6:	6d 89       	ldd	r22, Y+21	; 0x15
    25c8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ca:	8f 89       	ldd	r24, Y+23	; 0x17
    25cc:	98 8d       	ldd	r25, Y+24	; 0x18
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e8       	ldi	r20, 0x80	; 128
    25d4:	5f e3       	ldi	r21, 0x3F	; 63
    25d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25da:	88 23       	and	r24, r24
    25dc:	2c f4       	brge	.+10     	; 0x25e8 <LCD_voidWriteNLatch+0x304>
		__ticks = 1;
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	9c 8b       	std	Y+20, r25	; 0x14
    25e4:	8b 8b       	std	Y+19, r24	; 0x13
    25e6:	3f c0       	rjmp	.+126    	; 0x2666 <LCD_voidWriteNLatch+0x382>
	else if (__tmp > 65535)
    25e8:	6d 89       	ldd	r22, Y+21	; 0x15
    25ea:	7e 89       	ldd	r23, Y+22	; 0x16
    25ec:	8f 89       	ldd	r24, Y+23	; 0x17
    25ee:	98 8d       	ldd	r25, Y+24	; 0x18
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	3f ef       	ldi	r19, 0xFF	; 255
    25f4:	4f e7       	ldi	r20, 0x7F	; 127
    25f6:	57 e4       	ldi	r21, 0x47	; 71
    25f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25fc:	18 16       	cp	r1, r24
    25fe:	4c f5       	brge	.+82     	; 0x2652 <LCD_voidWriteNLatch+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2600:	69 8d       	ldd	r22, Y+25	; 0x19
    2602:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2604:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2606:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e2       	ldi	r20, 0x20	; 32
    260e:	51 e4       	ldi	r21, 0x41	; 65
    2610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	bc 01       	movw	r22, r24
    261a:	cd 01       	movw	r24, r26
    261c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	9c 8b       	std	Y+20, r25	; 0x14
    2626:	8b 8b       	std	Y+19, r24	; 0x13
    2628:	0f c0       	rjmp	.+30     	; 0x2648 <LCD_voidWriteNLatch+0x364>
    262a:	80 e9       	ldi	r24, 0x90	; 144
    262c:	91 e0       	ldi	r25, 0x01	; 1
    262e:	9a 8b       	std	Y+18, r25	; 0x12
    2630:	89 8b       	std	Y+17, r24	; 0x11
    2632:	89 89       	ldd	r24, Y+17	; 0x11
    2634:	9a 89       	ldd	r25, Y+18	; 0x12
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	f1 f7       	brne	.-4      	; 0x2636 <LCD_voidWriteNLatch+0x352>
    263a:	9a 8b       	std	Y+18, r25	; 0x12
    263c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263e:	8b 89       	ldd	r24, Y+19	; 0x13
    2640:	9c 89       	ldd	r25, Y+20	; 0x14
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	9c 8b       	std	Y+20, r25	; 0x14
    2646:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2648:	8b 89       	ldd	r24, Y+19	; 0x13
    264a:	9c 89       	ldd	r25, Y+20	; 0x14
    264c:	00 97       	sbiw	r24, 0x00	; 0
    264e:	69 f7       	brne	.-38     	; 0x262a <LCD_voidWriteNLatch+0x346>
    2650:	14 c0       	rjmp	.+40     	; 0x267a <LCD_voidWriteNLatch+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2652:	6d 89       	ldd	r22, Y+21	; 0x15
    2654:	7e 89       	ldd	r23, Y+22	; 0x16
    2656:	8f 89       	ldd	r24, Y+23	; 0x17
    2658:	98 8d       	ldd	r25, Y+24	; 0x18
    265a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	9c 8b       	std	Y+20, r25	; 0x14
    2664:	8b 8b       	std	Y+19, r24	; 0x13
    2666:	8b 89       	ldd	r24, Y+19	; 0x13
    2668:	9c 89       	ldd	r25, Y+20	; 0x14
    266a:	98 8b       	std	Y+16, r25	; 0x10
    266c:	8f 87       	std	Y+15, r24	; 0x0f
    266e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2670:	98 89       	ldd	r25, Y+16	; 0x10
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <LCD_voidWriteNLatch+0x38e>
    2676:	98 8b       	std	Y+16, r25	; 0x10
    2678:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	63 e0       	ldi	r22, 0x03	; 3
    267e:	40 e0       	ldi	r20, 0x00	; 0
    2680:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	a0 e0       	ldi	r26, 0x00	; 0
    268a:	b0 e4       	ldi	r27, 0x40	; 64
    268c:	8b 87       	std	Y+11, r24	; 0x0b
    268e:	9c 87       	std	Y+12, r25	; 0x0c
    2690:	ad 87       	std	Y+13, r26	; 0x0d
    2692:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2694:	6b 85       	ldd	r22, Y+11	; 0x0b
    2696:	7c 85       	ldd	r23, Y+12	; 0x0c
    2698:	8d 85       	ldd	r24, Y+13	; 0x0d
    269a:	9e 85       	ldd	r25, Y+14	; 0x0e
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	4a e7       	ldi	r20, 0x7A	; 122
    26a2:	55 e4       	ldi	r21, 0x45	; 69
    26a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	8f 83       	std	Y+7, r24	; 0x07
    26ae:	98 87       	std	Y+8, r25	; 0x08
    26b0:	a9 87       	std	Y+9, r26	; 0x09
    26b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26b4:	6f 81       	ldd	r22, Y+7	; 0x07
    26b6:	78 85       	ldd	r23, Y+8	; 0x08
    26b8:	89 85       	ldd	r24, Y+9	; 0x09
    26ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e8       	ldi	r20, 0x80	; 128
    26c2:	5f e3       	ldi	r21, 0x3F	; 63
    26c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c8:	88 23       	and	r24, r24
    26ca:	2c f4       	brge	.+10     	; 0x26d6 <LCD_voidWriteNLatch+0x3f2>
		__ticks = 1;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	9e 83       	std	Y+6, r25	; 0x06
    26d2:	8d 83       	std	Y+5, r24	; 0x05
    26d4:	3f c0       	rjmp	.+126    	; 0x2754 <LCD_voidWriteNLatch+0x470>
	else if (__tmp > 65535)
    26d6:	6f 81       	ldd	r22, Y+7	; 0x07
    26d8:	78 85       	ldd	r23, Y+8	; 0x08
    26da:	89 85       	ldd	r24, Y+9	; 0x09
    26dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	3f ef       	ldi	r19, 0xFF	; 255
    26e2:	4f e7       	ldi	r20, 0x7F	; 127
    26e4:	57 e4       	ldi	r21, 0x47	; 71
    26e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ea:	18 16       	cp	r1, r24
    26ec:	4c f5       	brge	.+82     	; 0x2740 <LCD_voidWriteNLatch+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e2       	ldi	r20, 0x20	; 32
    26fc:	51 e4       	ldi	r21, 0x41	; 65
    26fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	bc 01       	movw	r22, r24
    2708:	cd 01       	movw	r24, r26
    270a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	9e 83       	std	Y+6, r25	; 0x06
    2714:	8d 83       	std	Y+5, r24	; 0x05
    2716:	0f c0       	rjmp	.+30     	; 0x2736 <LCD_voidWriteNLatch+0x452>
    2718:	80 e9       	ldi	r24, 0x90	; 144
    271a:	91 e0       	ldi	r25, 0x01	; 1
    271c:	9c 83       	std	Y+4, r25	; 0x04
    271e:	8b 83       	std	Y+3, r24	; 0x03
    2720:	8b 81       	ldd	r24, Y+3	; 0x03
    2722:	9c 81       	ldd	r25, Y+4	; 0x04
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	f1 f7       	brne	.-4      	; 0x2724 <LCD_voidWriteNLatch+0x440>
    2728:	9c 83       	std	Y+4, r25	; 0x04
    272a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272c:	8d 81       	ldd	r24, Y+5	; 0x05
    272e:	9e 81       	ldd	r25, Y+6	; 0x06
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	9e 83       	std	Y+6, r25	; 0x06
    2734:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2736:	8d 81       	ldd	r24, Y+5	; 0x05
    2738:	9e 81       	ldd	r25, Y+6	; 0x06
    273a:	00 97       	sbiw	r24, 0x00	; 0
    273c:	69 f7       	brne	.-38     	; 0x2718 <LCD_voidWriteNLatch+0x434>
    273e:	14 c0       	rjmp	.+40     	; 0x2768 <LCD_voidWriteNLatch+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2740:	6f 81       	ldd	r22, Y+7	; 0x07
    2742:	78 85       	ldd	r23, Y+8	; 0x08
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	9a 85       	ldd	r25, Y+10	; 0x0a
    2748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	9e 83       	std	Y+6, r25	; 0x06
    2752:	8d 83       	std	Y+5, r24	; 0x05
    2754:	8d 81       	ldd	r24, Y+5	; 0x05
    2756:	9e 81       	ldd	r25, Y+6	; 0x06
    2758:	9a 83       	std	Y+2, r25	; 0x02
    275a:	89 83       	std	Y+1, r24	; 0x01
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	9a 81       	ldd	r25, Y+2	; 0x02
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <LCD_voidWriteNLatch+0x47c>
    2764:	9a 83       	std	Y+2, r25	; 0x02
    2766:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	#endif

					return;
}
    2768:	e9 96       	adiw	r28, 0x39	; 57
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <LCD_voidInit>:
void LCD_voidInit(void){
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	6c 97       	sbiw	r28, 0x1c	; 28
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinDirection(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8OUTPUT);
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	61 e0       	ldi	r22, 0x01	; 1
    2792:	41 e0       	ldi	r20, 0x01	; 1
    2794:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8RW_GROUP,LCD_u8RW_PIN,DIO_u8OUTPUT);
    2798:	82 e0       	ldi	r24, 0x02	; 2
    279a:	67 e0       	ldi	r22, 0x07	; 7
    279c:	41 e0       	ldi	r20, 0x01	; 1
    279e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8OUTPUT);
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	63 e0       	ldi	r22, 0x03	; 3
    27a6:	41 e0       	ldi	r20, 0x01	; 1
    27a8:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(LCD_u8D7_GROUP,LCD_u8D7_PIN,DIO_u8OUTPUT);
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	67 e0       	ldi	r22, 0x07	; 7
    27b0:	41 e0       	ldi	r20, 0x01	; 1
    27b2:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D6_GROUP,LCD_u8D6_PIN,DIO_u8OUTPUT);
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	66 e0       	ldi	r22, 0x06	; 6
    27ba:	41 e0       	ldi	r20, 0x01	; 1
    27bc:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D5_GROUP,LCD_u8D5_PIN,DIO_u8OUTPUT);
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	65 e0       	ldi	r22, 0x05	; 5
    27c4:	41 e0       	ldi	r20, 0x01	; 1
    27c6:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D4_GROUP,LCD_u8D4_PIN,DIO_u8OUTPUT);
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	64 e0       	ldi	r22, 0x04	; 4
    27ce:	41 e0       	ldi	r20, 0x01	; 1
    27d0:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D0_GROUP,LCD_u8D0_PIN,DIO_u8OUTPUT);

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8OW);
	LCD_voidWriteNLatch(0x38);
#elif LCD_MODE==FOUR_BIT
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,0);
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	67 e0       	ldi	r22, 0x07	; 7
    27d8:	40 e0       	ldi	r20, 0x00	; 0
    27da:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D6_GROUP,LCD_u8D6_PIN,0);
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	66 e0       	ldi	r22, 0x06	; 6
    27e2:	40 e0       	ldi	r20, 0x00	; 0
    27e4:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D5_GROUP,LCD_u8D5_PIN,1);
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	65 e0       	ldi	r22, 0x05	; 5
    27ec:	41 e0       	ldi	r20, 0x01	; 1
    27ee:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D4_GROUP,LCD_u8D4_PIN,0);
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	64 e0       	ldi	r22, 0x04	; 4
    27f6:	40 e0       	ldi	r20, 0x00	; 0
    27f8:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	63 e0       	ldi	r22, 0x03	; 3
    2800:	41 e0       	ldi	r20, 0x01	; 1
    2802:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	a0 e8       	ldi	r26, 0x80	; 128
    280c:	bf e3       	ldi	r27, 0x3F	; 63
    280e:	89 8f       	std	Y+25, r24	; 0x19
    2810:	9a 8f       	std	Y+26, r25	; 0x1a
    2812:	ab 8f       	std	Y+27, r26	; 0x1b
    2814:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2816:	69 8d       	ldd	r22, Y+25	; 0x19
    2818:	7a 8d       	ldd	r23, Y+26	; 0x1a
    281a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    281c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	4a e7       	ldi	r20, 0x7A	; 122
    2824:	55 e4       	ldi	r21, 0x45	; 69
    2826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	8d 8b       	std	Y+21, r24	; 0x15
    2830:	9e 8b       	std	Y+22, r25	; 0x16
    2832:	af 8b       	std	Y+23, r26	; 0x17
    2834:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2836:	6d 89       	ldd	r22, Y+21	; 0x15
    2838:	7e 89       	ldd	r23, Y+22	; 0x16
    283a:	8f 89       	ldd	r24, Y+23	; 0x17
    283c:	98 8d       	ldd	r25, Y+24	; 0x18
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e8       	ldi	r20, 0x80	; 128
    2844:	5f e3       	ldi	r21, 0x3F	; 63
    2846:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    284a:	88 23       	and	r24, r24
    284c:	2c f4       	brge	.+10     	; 0x2858 <LCD_voidInit+0xde>
		__ticks = 1;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	9c 8b       	std	Y+20, r25	; 0x14
    2854:	8b 8b       	std	Y+19, r24	; 0x13
    2856:	3f c0       	rjmp	.+126    	; 0x28d6 <LCD_voidInit+0x15c>
	else if (__tmp > 65535)
    2858:	6d 89       	ldd	r22, Y+21	; 0x15
    285a:	7e 89       	ldd	r23, Y+22	; 0x16
    285c:	8f 89       	ldd	r24, Y+23	; 0x17
    285e:	98 8d       	ldd	r25, Y+24	; 0x18
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	3f ef       	ldi	r19, 0xFF	; 255
    2864:	4f e7       	ldi	r20, 0x7F	; 127
    2866:	57 e4       	ldi	r21, 0x47	; 71
    2868:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    286c:	18 16       	cp	r1, r24
    286e:	4c f5       	brge	.+82     	; 0x28c2 <LCD_voidInit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2870:	69 8d       	ldd	r22, Y+25	; 0x19
    2872:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2874:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2876:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e2       	ldi	r20, 0x20	; 32
    287e:	51 e4       	ldi	r21, 0x41	; 65
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	bc 01       	movw	r22, r24
    288a:	cd 01       	movw	r24, r26
    288c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	9c 8b       	std	Y+20, r25	; 0x14
    2896:	8b 8b       	std	Y+19, r24	; 0x13
    2898:	0f c0       	rjmp	.+30     	; 0x28b8 <LCD_voidInit+0x13e>
    289a:	80 e9       	ldi	r24, 0x90	; 144
    289c:	91 e0       	ldi	r25, 0x01	; 1
    289e:	9a 8b       	std	Y+18, r25	; 0x12
    28a0:	89 8b       	std	Y+17, r24	; 0x11
    28a2:	89 89       	ldd	r24, Y+17	; 0x11
    28a4:	9a 89       	ldd	r25, Y+18	; 0x12
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <LCD_voidInit+0x12c>
    28aa:	9a 8b       	std	Y+18, r25	; 0x12
    28ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ae:	8b 89       	ldd	r24, Y+19	; 0x13
    28b0:	9c 89       	ldd	r25, Y+20	; 0x14
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	9c 8b       	std	Y+20, r25	; 0x14
    28b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ba:	9c 89       	ldd	r25, Y+20	; 0x14
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	69 f7       	brne	.-38     	; 0x289a <LCD_voidInit+0x120>
    28c0:	14 c0       	rjmp	.+40     	; 0x28ea <LCD_voidInit+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c2:	6d 89       	ldd	r22, Y+21	; 0x15
    28c4:	7e 89       	ldd	r23, Y+22	; 0x16
    28c6:	8f 89       	ldd	r24, Y+23	; 0x17
    28c8:	98 8d       	ldd	r25, Y+24	; 0x18
    28ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	9c 8b       	std	Y+20, r25	; 0x14
    28d4:	8b 8b       	std	Y+19, r24	; 0x13
    28d6:	8b 89       	ldd	r24, Y+19	; 0x13
    28d8:	9c 89       	ldd	r25, Y+20	; 0x14
    28da:	98 8b       	std	Y+16, r25	; 0x10
    28dc:	8f 87       	std	Y+15, r24	; 0x0f
    28de:	8f 85       	ldd	r24, Y+15	; 0x0f
    28e0:	98 89       	ldd	r25, Y+16	; 0x10
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	f1 f7       	brne	.-4      	; 0x28e2 <LCD_voidInit+0x168>
    28e6:	98 8b       	std	Y+16, r25	; 0x10
    28e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	63 e0       	ldi	r22, 0x03	; 3
    28ee:	40 e0       	ldi	r20, 0x00	; 0
    28f0:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	a0 e0       	ldi	r26, 0x00	; 0
    28fa:	b0 e4       	ldi	r27, 0x40	; 64
    28fc:	8b 87       	std	Y+11, r24	; 0x0b
    28fe:	9c 87       	std	Y+12, r25	; 0x0c
    2900:	ad 87       	std	Y+13, r26	; 0x0d
    2902:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2904:	6b 85       	ldd	r22, Y+11	; 0x0b
    2906:	7c 85       	ldd	r23, Y+12	; 0x0c
    2908:	8d 85       	ldd	r24, Y+13	; 0x0d
    290a:	9e 85       	ldd	r25, Y+14	; 0x0e
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	4a e7       	ldi	r20, 0x7A	; 122
    2912:	55 e4       	ldi	r21, 0x45	; 69
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	8f 83       	std	Y+7, r24	; 0x07
    291e:	98 87       	std	Y+8, r25	; 0x08
    2920:	a9 87       	std	Y+9, r26	; 0x09
    2922:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2924:	6f 81       	ldd	r22, Y+7	; 0x07
    2926:	78 85       	ldd	r23, Y+8	; 0x08
    2928:	89 85       	ldd	r24, Y+9	; 0x09
    292a:	9a 85       	ldd	r25, Y+10	; 0x0a
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e8       	ldi	r20, 0x80	; 128
    2932:	5f e3       	ldi	r21, 0x3F	; 63
    2934:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2938:	88 23       	and	r24, r24
    293a:	2c f4       	brge	.+10     	; 0x2946 <LCD_voidInit+0x1cc>
		__ticks = 1;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9e 83       	std	Y+6, r25	; 0x06
    2942:	8d 83       	std	Y+5, r24	; 0x05
    2944:	3f c0       	rjmp	.+126    	; 0x29c4 <LCD_voidInit+0x24a>
	else if (__tmp > 65535)
    2946:	6f 81       	ldd	r22, Y+7	; 0x07
    2948:	78 85       	ldd	r23, Y+8	; 0x08
    294a:	89 85       	ldd	r24, Y+9	; 0x09
    294c:	9a 85       	ldd	r25, Y+10	; 0x0a
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	3f ef       	ldi	r19, 0xFF	; 255
    2952:	4f e7       	ldi	r20, 0x7F	; 127
    2954:	57 e4       	ldi	r21, 0x47	; 71
    2956:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    295a:	18 16       	cp	r1, r24
    295c:	4c f5       	brge	.+82     	; 0x29b0 <LCD_voidInit+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2960:	7c 85       	ldd	r23, Y+12	; 0x0c
    2962:	8d 85       	ldd	r24, Y+13	; 0x0d
    2964:	9e 85       	ldd	r25, Y+14	; 0x0e
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e2       	ldi	r20, 0x20	; 32
    296c:	51 e4       	ldi	r21, 0x41	; 65
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	bc 01       	movw	r22, r24
    2978:	cd 01       	movw	r24, r26
    297a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	9e 83       	std	Y+6, r25	; 0x06
    2984:	8d 83       	std	Y+5, r24	; 0x05
    2986:	0f c0       	rjmp	.+30     	; 0x29a6 <LCD_voidInit+0x22c>
    2988:	80 e9       	ldi	r24, 0x90	; 144
    298a:	91 e0       	ldi	r25, 0x01	; 1
    298c:	9c 83       	std	Y+4, r25	; 0x04
    298e:	8b 83       	std	Y+3, r24	; 0x03
    2990:	8b 81       	ldd	r24, Y+3	; 0x03
    2992:	9c 81       	ldd	r25, Y+4	; 0x04
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	f1 f7       	brne	.-4      	; 0x2994 <LCD_voidInit+0x21a>
    2998:	9c 83       	std	Y+4, r25	; 0x04
    299a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299c:	8d 81       	ldd	r24, Y+5	; 0x05
    299e:	9e 81       	ldd	r25, Y+6	; 0x06
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	9e 83       	std	Y+6, r25	; 0x06
    29a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a6:	8d 81       	ldd	r24, Y+5	; 0x05
    29a8:	9e 81       	ldd	r25, Y+6	; 0x06
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	69 f7       	brne	.-38     	; 0x2988 <LCD_voidInit+0x20e>
    29ae:	14 c0       	rjmp	.+40     	; 0x29d8 <LCD_voidInit+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b0:	6f 81       	ldd	r22, Y+7	; 0x07
    29b2:	78 85       	ldd	r23, Y+8	; 0x08
    29b4:	89 85       	ldd	r24, Y+9	; 0x09
    29b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	9e 83       	std	Y+6, r25	; 0x06
    29c2:	8d 83       	std	Y+5, r24	; 0x05
    29c4:	8d 81       	ldd	r24, Y+5	; 0x05
    29c6:	9e 81       	ldd	r25, Y+6	; 0x06
    29c8:	9a 83       	std	Y+2, r25	; 0x02
    29ca:	89 83       	std	Y+1, r24	; 0x01
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	9a 81       	ldd	r25, Y+2	; 0x02
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	f1 f7       	brne	.-4      	; 0x29d0 <LCD_voidInit+0x256>
    29d4:	9a 83       	std	Y+2, r25	; 0x02
    29d6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	61 e0       	ldi	r22, 0x01	; 1
    29dc:	40 e0       	ldi	r20, 0x00	; 0
    29de:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>

	      LCD_voidWriteNLatch(0x28);
    29e2:	88 e2       	ldi	r24, 0x28	; 40
    29e4:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidWriteNLatch>

#endif
	      //desplay on off

	     	      DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	61 e0       	ldi	r22, 0x01	; 1
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	     	      LCD_voidWriteNLatch(0X0F);
    29f2:	8f e0       	ldi	r24, 0x0F	; 15
    29f4:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidWriteNLatch>
	     	      //desplay clear
	     	     DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	61 e0       	ldi	r22, 0x01	; 1
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	     	    	     	      LCD_voidWriteNLatch(0X01);
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidWriteNLatch>
	     	    	     	      //set mode (increasing or decreasing)and the cursor
	     	    	     	     DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	61 e0       	ldi	r22, 0x01	; 1
    2a0c:	40 e0       	ldi	r20, 0x00	; 0
    2a0e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	     	    	     	    	      LCD_voidWriteNLatch(0X06);
    2a12:	86 e0       	ldi	r24, 0x06	; 6
    2a14:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidWriteNLatch>
	      return;
}
    2a18:	6c 96       	adiw	r28, 0x1c	; 28
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <LCD_voidWriteData>:
void LCD_voidWriteData(u8 Copy_u8Data){
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	0f 92       	push	r0
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
    2a34:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	61 e0       	ldi	r22, 0x01	; 1
    2a3a:	41 e0       	ldi	r20, 0x01	; 1
    2a3c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	LCD_voidWriteNLatch(Copy_u8Data);
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidWriteNLatch>
	return;
}
    2a46:	0f 90       	pop	r0
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	08 95       	ret

00002a4e <LCD_voidWriteCommand>:
void LCD_voidWriteCommand(u8 Copy_u8Command){
    2a4e:	df 93       	push	r29
    2a50:	cf 93       	push	r28
    2a52:	0f 92       	push	r0
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
    2a58:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	61 e0       	ldi	r22, 0x01	; 1
    2a5e:	40 e0       	ldi	r20, 0x00	; 0
    2a60:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
			      LCD_voidWriteNLatch(Copy_u8Command);
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidWriteNLatch>
			      return;
}
    2a6a:	0f 90       	pop	r0
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	08 95       	ret

00002a72 <LCD_voidWriteString>:

void LCD_voidWriteString(const char*Copy_String){
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <LCD_voidWriteString+0x6>
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	9a 83       	std	Y+2, r25	; 0x02
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    2a80:	10 c0       	rjmp	.+32     	; 0x2aa2 <LCD_voidWriteString+0x30>

	while(*Copy_String!=0){
			DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	61 e0       	ldi	r22, 0x01	; 1
    2a86:	41 e0       	ldi	r20, 0x01	; 1
    2a88:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
			LCD_voidWriteNLatch(*Copy_String++);
    2a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a90:	20 81       	ld	r18, Z
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	9a 81       	ldd	r25, Y+2	; 0x02
    2a96:	01 96       	adiw	r24, 0x01	; 1
    2a98:	9a 83       	std	Y+2, r25	; 0x02
    2a9a:	89 83       	std	Y+1, r24	; 0x01
    2a9c:	82 2f       	mov	r24, r18
    2a9e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidWriteNLatch>
			      return;
}

void LCD_voidWriteString(const char*Copy_String){

	while(*Copy_String!=0){
    2aa2:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa4:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa6:	80 81       	ld	r24, Z
    2aa8:	88 23       	and	r24, r24
    2aaa:	59 f7       	brne	.-42     	; 0x2a82 <LCD_voidWriteString+0x10>
			DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
			LCD_voidWriteNLatch(*Copy_String++);
		}
	return;
}
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	08 95       	ret

00002ab6 <LCD_voidClearScreen>:
void LCD_voidClearScreen(void){
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	61 e0       	ldi	r22, 0x01	; 1
    2ac2:	40 e0       	ldi	r20, 0x00	; 0
    2ac4:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
	LCD_voidWriteNLatch(0x01);
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_voidWriteNLatch>
	LCD_voidWriteCommand(0x80);           //GO TO POSITION ZER0
    2ace:	80 e8       	ldi	r24, 0x80	; 128
    2ad0:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <LCD_voidWriteCommand>
	return;
}
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	08 95       	ret

00002ada <LCD_voidShiftDisplayRight>:
void LCD_voidShiftDisplayRight(void){
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62

	LCD_voidWriteCommand(0x18);
    2ae2:	88 e1       	ldi	r24, 0x18	; 24
    2ae4:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <LCD_voidWriteCommand>
	return ;
}
    2ae8:	cf 91       	pop	r28
    2aea:	df 91       	pop	r29
    2aec:	08 95       	ret

00002aee <LCD_voidDisplayLeft>:
void LCD_voidDisplayLeft(void){
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62

	LCD_voidWriteCommand(0x1c);
    2af6:	8c e1       	ldi	r24, 0x1C	; 28
    2af8:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <LCD_voidWriteCommand>
	return ;
}
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <LCD_voidSetCgram>:
void LCD_voidSetCgram(u8 * Copy_u8Array,u8 Copy_u8Position,u8 Copy_u8Num_Char){
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <LCD_voidSetCgram+0x6>
    2b08:	00 d0       	rcall	.+0      	; 0x2b0a <LCD_voidSetCgram+0x8>
    2b0a:	0f 92       	push	r0
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
    2b10:	9b 83       	std	Y+3, r25	; 0x03
    2b12:	8a 83       	std	Y+2, r24	; 0x02
    2b14:	6c 83       	std	Y+4, r22	; 0x04
    2b16:	4d 83       	std	Y+5, r20	; 0x05

	LCD_voidWriteCommand(0x40+8*Copy_u8Position);
    2b18:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1a:	88 2f       	mov	r24, r24
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	08 96       	adiw	r24, 0x08	; 8
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <LCD_voidWriteCommand>
		u8 i;
		for(i=0;i<8*Copy_u8Num_Char;i++){
    2b30:	19 82       	std	Y+1, r1	; 0x01
    2b32:	0e c0       	rjmp	.+28     	; 0x2b50 <LCD_voidSetCgram+0x4e>
			LCD_voidWriteData(Copy_u8Array[i]);
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	28 2f       	mov	r18, r24
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3e:	fc 01       	movw	r30, r24
    2b40:	e2 0f       	add	r30, r18
    2b42:	f3 1f       	adc	r31, r19
    2b44:	80 81       	ld	r24, Z
    2b46:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <LCD_voidWriteData>
}
void LCD_voidSetCgram(u8 * Copy_u8Array,u8 Copy_u8Position,u8 Copy_u8Num_Char){

	LCD_voidWriteCommand(0x40+8*Copy_u8Position);
		u8 i;
		for(i=0;i<8*Copy_u8Num_Char;i++){
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	8f 5f       	subi	r24, 0xFF	; 255
    2b4e:	89 83       	std	Y+1, r24	; 0x01
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	28 2f       	mov	r18, r24
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	8d 81       	ldd	r24, Y+5	; 0x05
    2b58:	88 2f       	mov	r24, r24
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	88 0f       	add	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	88 0f       	add	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	88 0f       	add	r24, r24
    2b66:	99 1f       	adc	r25, r25
    2b68:	28 17       	cp	r18, r24
    2b6a:	39 07       	cpc	r19, r25
    2b6c:	1c f3       	brlt	.-58     	; 0x2b34 <LCD_voidSetCgram+0x32>
			LCD_voidWriteData(Copy_u8Array[i]);

		}
		return;
}
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	0f 90       	pop	r0
    2b76:	0f 90       	pop	r0
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	08 95       	ret

00002b7e <LCD_voidSetDdram>:
void LCD_voidSetDdram(u8 Copy_u8Position){
    2b7e:	df 93       	push	r29
    2b80:	cf 93       	push	r28
    2b82:	0f 92       	push	r0
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	89 83       	std	Y+1, r24	; 0x01

		LCD_voidWriteCommand(0X80+(8*Copy_u8Position));
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	88 2f       	mov	r24, r24
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	40 96       	adiw	r24, 0x10	; 16
    2b92:	88 0f       	add	r24, r24
    2b94:	99 1f       	adc	r25, r25
    2b96:	88 0f       	add	r24, r24
    2b98:	99 1f       	adc	r25, r25
    2b9a:	88 0f       	add	r24, r24
    2b9c:	99 1f       	adc	r25, r25
    2b9e:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <LCD_voidWriteCommand>
		return;
}
    2ba2:	0f 90       	pop	r0
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <LCD_voidWriteCharacter>:
void LCD_voidWriteCharacter(u8 Copy_u8Char){
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	0f 92       	push	r0
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
    2bb4:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteData(Copy_u8Char);
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <LCD_voidWriteData>
	return;
}
    2bbc:	0f 90       	pop	r0
    2bbe:	cf 91       	pop	r28
    2bc0:	df 91       	pop	r29
    2bc2:	08 95       	ret

00002bc4 <LCD_voidWritInteger>:
void LCD_voidWritInteger(u16 Copy_intNumber){
    2bc4:	df 93       	push	r29
    2bc6:	cf 93       	push	r28
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	2f 97       	sbiw	r28, 0x0f	; 15
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	f8 94       	cli
    2bd2:	de bf       	out	0x3e, r29	; 62
    2bd4:	0f be       	out	0x3f, r0	; 63
    2bd6:	cd bf       	out	0x3d, r28	; 61
    2bd8:	99 87       	std	Y+9, r25	; 0x09
    2bda:	88 87       	std	Y+8, r24	; 0x08
}
for(u8 i=0;i<local_u8Length;i++){
	LCD_voidWriteCharacter(array[i]);
}
return;
}
    2bdc:	2d b7       	in	r18, 0x3d	; 61
    2bde:	3e b7       	in	r19, 0x3e	; 62
    2be0:	3f 87       	std	Y+15, r19	; 0x0f
    2be2:	2e 87       	std	Y+14, r18	; 0x0e
void LCD_voidWriteCharacter(u8 Copy_u8Char){

	LCD_voidWriteData(Copy_u8Char);
	return;
}
void LCD_voidWritInteger(u16 Copy_intNumber){
    2be4:	8d b7       	in	r24, 0x3d	; 61
    2be6:	9e b7       	in	r25, 0x3e	; 62
    2be8:	9b 87       	std	Y+11, r25	; 0x0b
    2bea:	8a 87       	std	Y+10, r24	; 0x0a

int local_intTempNum=Copy_intNumber;
    2bec:	88 85       	ldd	r24, Y+8	; 0x08
    2bee:	99 85       	ldd	r25, Y+9	; 0x09
    2bf0:	9d 83       	std	Y+5, r25	; 0x05
    2bf2:	8c 83       	std	Y+4, r24	; 0x04
u8 local_u8Length=0;
    2bf4:	1b 82       	std	Y+3, r1	; 0x03
if(Copy_intNumber==0){
    2bf6:	88 85       	ldd	r24, Y+8	; 0x08
    2bf8:	99 85       	ldd	r25, Y+9	; 0x09
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	89 f4       	brne	.+34     	; 0x2c20 <LCD_voidWritInteger+0x5c>
	LCD_voidWriteCharacter('0');
    2bfe:	80 e3       	ldi	r24, 0x30	; 48
    2c00:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_voidWriteCharacter>
    2c04:	69 c0       	rjmp	.+210    	; 0x2cd8 <LCD_voidWritInteger+0x114>
	return;
}
while(local_intTempNum!=0){
	local_intTempNum/=10;
    2c06:	8c 81       	ldd	r24, Y+4	; 0x04
    2c08:	9d 81       	ldd	r25, Y+5	; 0x05
    2c0a:	2a e0       	ldi	r18, 0x0A	; 10
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	b9 01       	movw	r22, r18
    2c10:	0e 94 8f 1a 	call	0x351e	; 0x351e <__divmodhi4>
    2c14:	cb 01       	movw	r24, r22
    2c16:	9d 83       	std	Y+5, r25	; 0x05
    2c18:	8c 83       	std	Y+4, r24	; 0x04
	local_u8Length++;
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	8f 5f       	subi	r24, 0xFF	; 255
    2c1e:	8b 83       	std	Y+3, r24	; 0x03
u8 local_u8Length=0;
if(Copy_intNumber==0){
	LCD_voidWriteCharacter('0');
	return;
}
while(local_intTempNum!=0){
    2c20:	8c 81       	ldd	r24, Y+4	; 0x04
    2c22:	9d 81       	ldd	r25, Y+5	; 0x05
    2c24:	00 97       	sbiw	r24, 0x00	; 0
    2c26:	79 f7       	brne	.-34     	; 0x2c06 <LCD_voidWritInteger+0x42>
	local_intTempNum/=10;
	local_u8Length++;
}
u8 array[local_u8Length];
    2c28:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2a:	88 2f       	mov	r24, r24
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	2d b7       	in	r18, 0x3d	; 61
    2c30:	3e b7       	in	r19, 0x3e	; 62
    2c32:	28 1b       	sub	r18, r24
    2c34:	39 0b       	sbc	r19, r25
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	3e bf       	out	0x3e, r19	; 62
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	2d bf       	out	0x3d, r18	; 61
    2c40:	8d b7       	in	r24, 0x3d	; 61
    2c42:	9e b7       	in	r25, 0x3e	; 62
    2c44:	01 96       	adiw	r24, 0x01	; 1
    2c46:	9d 87       	std	Y+13, r25	; 0x0d
    2c48:	8c 87       	std	Y+12, r24	; 0x0c
    2c4a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c4c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c4e:	00 96       	adiw	r24, 0x00	; 0
    2c50:	9d 87       	std	Y+13, r25	; 0x0d
    2c52:	8c 87       	std	Y+12, r24	; 0x0c
    2c54:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c56:	3d 85       	ldd	r19, Y+13	; 0x0d
    2c58:	3f 83       	std	Y+7, r19	; 0x07
    2c5a:	2e 83       	std	Y+6, r18	; 0x06
local_intTempNum=Copy_intNumber;
    2c5c:	88 85       	ldd	r24, Y+8	; 0x08
    2c5e:	99 85       	ldd	r25, Y+9	; 0x09
    2c60:	9d 83       	std	Y+5, r25	; 0x05
    2c62:	8c 83       	std	Y+4, r24	; 0x04
for(u8 i=local_u8Length;i>0;i--){
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	8a 83       	std	Y+2, r24	; 0x02
    2c68:	20 c0       	rjmp	.+64     	; 0x2caa <LCD_voidWritInteger+0xe6>
	array[i-1]=local_intTempNum%10+'0';
    2c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6c:	88 2f       	mov	r24, r24
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	fc 01       	movw	r30, r24
    2c72:	31 97       	sbiw	r30, 0x01	; 1
    2c74:	8c 81       	ldd	r24, Y+4	; 0x04
    2c76:	9d 81       	ldd	r25, Y+5	; 0x05
    2c78:	2a e0       	ldi	r18, 0x0A	; 10
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	b9 01       	movw	r22, r18
    2c7e:	0e 94 8f 1a 	call	0x351e	; 0x351e <__divmodhi4>
    2c82:	28 2f       	mov	r18, r24
    2c84:	20 5d       	subi	r18, 0xD0	; 208
    2c86:	8e 81       	ldd	r24, Y+6	; 0x06
    2c88:	9f 81       	ldd	r25, Y+7	; 0x07
    2c8a:	e8 0f       	add	r30, r24
    2c8c:	f9 1f       	adc	r31, r25
    2c8e:	20 83       	st	Z, r18
	local_intTempNum/=10;
    2c90:	8c 81       	ldd	r24, Y+4	; 0x04
    2c92:	9d 81       	ldd	r25, Y+5	; 0x05
    2c94:	2a e0       	ldi	r18, 0x0A	; 10
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	b9 01       	movw	r22, r18
    2c9a:	0e 94 8f 1a 	call	0x351e	; 0x351e <__divmodhi4>
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	9d 83       	std	Y+5, r25	; 0x05
    2ca2:	8c 83       	std	Y+4, r24	; 0x04
	local_intTempNum/=10;
	local_u8Length++;
}
u8 array[local_u8Length];
local_intTempNum=Copy_intNumber;
for(u8 i=local_u8Length;i>0;i--){
    2ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca6:	81 50       	subi	r24, 0x01	; 1
    2ca8:	8a 83       	std	Y+2, r24	; 0x02
    2caa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cac:	88 23       	and	r24, r24
    2cae:	e9 f6       	brne	.-70     	; 0x2c6a <LCD_voidWritInteger+0xa6>
	array[i-1]=local_intTempNum%10+'0';
	local_intTempNum/=10;
}
for(u8 i=0;i<local_u8Length;i++){
    2cb0:	19 82       	std	Y+1, r1	; 0x01
    2cb2:	0e c0       	rjmp	.+28     	; 0x2cd0 <LCD_voidWritInteger+0x10c>
	LCD_voidWriteCharacter(array[i]);
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	8e 81       	ldd	r24, Y+6	; 0x06
    2cbc:	9f 81       	ldd	r25, Y+7	; 0x07
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	e2 0f       	add	r30, r18
    2cc2:	f3 1f       	adc	r31, r19
    2cc4:	80 81       	ld	r24, Z
    2cc6:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_voidWriteCharacter>
local_intTempNum=Copy_intNumber;
for(u8 i=local_u8Length;i>0;i--){
	array[i-1]=local_intTempNum%10+'0';
	local_intTempNum/=10;
}
for(u8 i=0;i<local_u8Length;i++){
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	8f 5f       	subi	r24, 0xFF	; 255
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	99 81       	ldd	r25, Y+1	; 0x01
    2cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd4:	98 17       	cp	r25, r24
    2cd6:	70 f3       	brcs	.-36     	; 0x2cb4 <LCD_voidWritInteger+0xf0>
    2cd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cda:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	f8 94       	cli
    2ce0:	9e bf       	out	0x3e, r25	; 62
    2ce2:	0f be       	out	0x3f, r0	; 63
    2ce4:	8d bf       	out	0x3d, r24	; 61
	LCD_voidWriteCharacter(array[i]);
}
return;
}
    2ce6:	2e 85       	ldd	r18, Y+14	; 0x0e
    2ce8:	3f 85       	ldd	r19, Y+15	; 0x0f
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	3e bf       	out	0x3e, r19	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	2d bf       	out	0x3d, r18	; 61
    2cf4:	2f 96       	adiw	r28, 0x0f	; 15
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	08 95       	ret

00002d06 <LCD_voidWriteFloat>:
void LCD_voidWriteFloat(f32 Copy_floatNumber){
    2d06:	df 93       	push	r29
    2d08:	cf 93       	push	r28
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	2c 97       	sbiw	r28, 0x0c	; 12
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	f8 94       	cli
    2d14:	de bf       	out	0x3e, r29	; 62
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	cd bf       	out	0x3d, r28	; 61
    2d1a:	69 87       	std	Y+9, r22	; 0x09
    2d1c:	7a 87       	std	Y+10, r23	; 0x0a
    2d1e:	8b 87       	std	Y+11, r24	; 0x0b
    2d20:	9c 87       	std	Y+12, r25	; 0x0c

	u32 Local_u32int=(u32)(Copy_floatNumber);
    2d22:	69 85       	ldd	r22, Y+9	; 0x09
    2d24:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d26:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d28:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	8d 83       	std	Y+5, r24	; 0x05
    2d34:	9e 83       	std	Y+6, r25	; 0x06
    2d36:	af 83       	std	Y+7, r26	; 0x07
    2d38:	b8 87       	std	Y+8, r27	; 0x08
	LCD_voidWritInteger(Local_u32int);
    2d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3e:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <LCD_voidWritInteger>
	LCD_voidWriteCharacter('.');
    2d42:	8e e2       	ldi	r24, 0x2E	; 46
    2d44:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_voidWriteCharacter>
	u32 Local_u32float=(u32)(1000.0*(Copy_floatNumber-(u32)(Local_u32int)));
    2d48:	6d 81       	ldd	r22, Y+5	; 0x05
    2d4a:	7e 81       	ldd	r23, Y+6	; 0x06
    2d4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2d4e:	98 85       	ldd	r25, Y+8	; 0x08
    2d50:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2d54:	9b 01       	movw	r18, r22
    2d56:	ac 01       	movw	r20, r24
    2d58:	69 85       	ldd	r22, Y+9	; 0x09
    2d5a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d60:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	bc 01       	movw	r22, r24
    2d6a:	cd 01       	movw	r24, r26
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	4a e7       	ldi	r20, 0x7A	; 122
    2d72:	54 e4       	ldi	r21, 0x44	; 68
    2d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	bc 01       	movw	r22, r24
    2d7e:	cd 01       	movw	r24, r26
    2d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	89 83       	std	Y+1, r24	; 0x01
    2d8a:	9a 83       	std	Y+2, r25	; 0x02
    2d8c:	ab 83       	std	Y+3, r26	; 0x03
    2d8e:	bc 83       	std	Y+4, r27	; 0x04
    LCD_voidWritInteger(Local_u32float);
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	9a 81       	ldd	r25, Y+2	; 0x02
    2d94:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <LCD_voidWritInteger>

	return;
}
    2d98:	2c 96       	adiw	r28, 0x0c	; 12
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	de bf       	out	0x3e, r29	; 62
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	cd bf       	out	0x3d, r28	; 61
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	08 95       	ret

00002daa <LCD_voidGoToPosition>:
void LCD_voidGoToPosition(u8 Copy_u8Row,u8 Copy_u8Col){
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	00 d0       	rcall	.+0      	; 0x2db0 <LCD_voidGoToPosition+0x6>
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	89 83       	std	Y+1, r24	; 0x01
    2db6:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8Row<=1&&Copy_u8Col<=16){
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
    2dba:	82 30       	cpi	r24, 0x02	; 2
    2dbc:	90 f4       	brcc	.+36     	; 0x2de2 <LCD_voidGoToPosition+0x38>
    2dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc0:	81 31       	cpi	r24, 0x11	; 17
    2dc2:	78 f4       	brcc	.+30     	; 0x2de2 <LCD_voidGoToPosition+0x38>
		if(Copy_u8Row==0){
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	88 23       	and	r24, r24
    2dc8:	29 f4       	brne	.+10     	; 0x2dd4 <LCD_voidGoToPosition+0x2a>
			LCD_voidWriteCommand((0x80+Copy_u8Col));
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	80 58       	subi	r24, 0x80	; 128
    2dce:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <LCD_voidWriteCommand>
    2dd2:	07 c0       	rjmp	.+14     	; 0x2de2 <LCD_voidGoToPosition+0x38>
		}
		else if(Copy_u8Row==1){
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	81 30       	cpi	r24, 0x01	; 1
    2dd8:	21 f4       	brne	.+8      	; 0x2de2 <LCD_voidGoToPosition+0x38>
			LCD_voidWriteCommand((0xC0+Copy_u8Col));
    2dda:	8a 81       	ldd	r24, Y+2	; 0x02
    2ddc:	80 54       	subi	r24, 0x40	; 64
    2dde:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <LCD_voidWriteCommand>
		}
	}

		return;

}
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <HEATING_ELEMENT_voidInit>:
 */
#include"../../LIBRARY/stdTypes.h"
#include"../../MCAL/DIO/DIO_int.h"
#include "HEATING_ELEMENT_priv.h"
#include "HEATING_ELEMENT_conf.h"
void HEATING_ELEMENT_voidInit(void){
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(HEATING_ELEMENT_GROUP,HEATING_ELEMENT_PIN,DIO_u8OUTPUT);
    2df4:	82 e0       	ldi	r24, 0x02	; 2
    2df6:	63 e0       	ldi	r22, 0x03	; 3
    2df8:	41 e0       	ldi	r20, 0x01	; 1
    2dfa:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_voidSetPinDirection>
}
    2dfe:	cf 91       	pop	r28
    2e00:	df 91       	pop	r29
    2e02:	08 95       	ret

00002e04 <HEATING_ELEMENT_voidEnable>:
void HEATING_ELEMENT_voidEnable(void){
    2e04:	df 93       	push	r29
    2e06:	cf 93       	push	r28
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(HEATING_ELEMENT_GROUP,HEATING_ELEMENT_PIN,DIO_u8HIGH);
    2e0c:	82 e0       	ldi	r24, 0x02	; 2
    2e0e:	63 e0       	ldi	r22, 0x03	; 3
    2e10:	41 e0       	ldi	r20, 0x01	; 1
    2e12:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
}
    2e16:	cf 91       	pop	r28
    2e18:	df 91       	pop	r29
    2e1a:	08 95       	ret

00002e1c <HEATING_ELEMENT_voidDisable>:
void HEATING_ELEMENT_voidDisable(void){
    2e1c:	df 93       	push	r29
    2e1e:	cf 93       	push	r28
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(HEATING_ELEMENT_GROUP,HEATING_ELEMENT_PIN,DIO_u8LOW);
    2e24:	82 e0       	ldi	r24, 0x02	; 2
    2e26:	63 e0       	ldi	r22, 0x03	; 3
    2e28:	40 e0       	ldi	r20, 0x00	; 0
    2e2a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
}
    2e2e:	cf 91       	pop	r28
    2e30:	df 91       	pop	r29
    2e32:	08 95       	ret

00002e34 <EEPROM_voidInit>:
#include"../../MCAL/IIC/IIC_int.h"
#include"EEPROM_priv.h"
#include "EEPROM_conf.h"

void EEPROM_voidInit(void)
{
    2e34:	df 93       	push	r29
    2e36:	cf 93       	push	r28
    2e38:	cd b7       	in	r28, 0x3d	; 61
    2e3a:	de b7       	in	r29, 0x3e	; 62

	IIC_voidInit();
    2e3c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <IIC_voidInit>
	return;
}
    2e40:	cf 91       	pop	r28
    2e42:	df 91       	pop	r29
    2e44:	08 95       	ret

00002e46 <EEPROM_voidWrite>:
void EEPROM_voidWrite(u8 Copy_u8Data,u8 Copy_u8PageAddress,u8 Copy_u8ByteAddress)
{
    2e46:	df 93       	push	r29
    2e48:	cf 93       	push	r28
    2e4a:	00 d0       	rcall	.+0      	; 0x2e4c <EEPROM_voidWrite+0x6>
    2e4c:	0f 92       	push	r0
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
    2e52:	89 83       	std	Y+1, r24	; 0x01
    2e54:	6a 83       	std	Y+2, r22	; 0x02
    2e56:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8PageAddress < 8)
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	88 30       	cpi	r24, 0x08	; 8
    2e5c:	70 f4       	brcc	.+28     	; 0x2e7a <EEPROM_voidWrite+0x34>
	{
		IIC_voidStartCondition();
    2e5e:	0e 94 02 07 	call	0xe04	; 0xe04 <IIC_voidStartCondition>
		IIC_voidSendSlaveAddressWrite((0x50 | Copy_u8PageAddress));
    2e62:	8a 81       	ldd	r24, Y+2	; 0x02
    2e64:	80 65       	ori	r24, 0x50	; 80
    2e66:	0e 94 a4 07 	call	0xf48	; 0xf48 <IIC_voidSendSlaveAddressWrite>
		IIC_voidSendData(Copy_u8ByteAddress);
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <IIC_voidSendData>
		IIC_voidSendData(Copy_u8Data);
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <IIC_voidSendData>
		IIC_voidStopCondition();
    2e76:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <IIC_voidStopCondition>
	}

}
    2e7a:	0f 90       	pop	r0
    2e7c:	0f 90       	pop	r0
    2e7e:	0f 90       	pop	r0
    2e80:	cf 91       	pop	r28
    2e82:	df 91       	pop	r29
    2e84:	08 95       	ret

00002e86 <EEPROM_voidRead>:
void EEPROM_voidRead(u8* Copy_u8Data,u8 Copy_u8PageAddress,u8 Copy_u8ByteAddress)
{
    2e86:	df 93       	push	r29
    2e88:	cf 93       	push	r28
    2e8a:	00 d0       	rcall	.+0      	; 0x2e8c <EEPROM_voidRead+0x6>
    2e8c:	00 d0       	rcall	.+0      	; 0x2e8e <EEPROM_voidRead+0x8>
    2e8e:	0f 92       	push	r0
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	9b 83       	std	Y+3, r25	; 0x03
    2e96:	8a 83       	std	Y+2, r24	; 0x02
    2e98:	6c 83       	std	Y+4, r22	; 0x04
    2e9a:	4d 83       	std	Y+5, r20	; 0x05
		if(Copy_u8PageAddress < 8)
    2e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9e:	88 30       	cpi	r24, 0x08	; 8
    2ea0:	d0 f4       	brcc	.+52     	; 0x2ed6 <EEPROM_voidRead+0x50>
		{
	u8 Local_u8Data = 0;
    2ea2:	19 82       	std	Y+1, r1	; 0x01
	IIC_voidStartCondition();
    2ea4:	0e 94 02 07 	call	0xe04	; 0xe04 <IIC_voidStartCondition>
	IIC_voidSendSlaveAddressWrite((0x50 | Copy_u8PageAddress));
    2ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eaa:	80 65       	ori	r24, 0x50	; 80
    2eac:	0e 94 a4 07 	call	0xf48	; 0xf48 <IIC_voidSendSlaveAddressWrite>
	IIC_voidSendData(Copy_u8ByteAddress);
    2eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb2:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <IIC_voidSendData>
	IIC_voidRepeatedStart();
    2eb6:	0e 94 c7 09 	call	0x138e	; 0x138e <IIC_voidRepeatedStart>
	IIC_voidSendSlaveAddressRead((0x50 | Copy_u8PageAddress));
    2eba:	8c 81       	ldd	r24, Y+4	; 0x04
    2ebc:	80 65       	ori	r24, 0x50	; 80
    2ebe:	0e 94 45 08 	call	0x108a	; 0x108a <IIC_voidSendSlaveAddressRead>
	IIC_voidReadDataNoAck(&Local_u8Data);
    2ec2:	ce 01       	movw	r24, r28
    2ec4:	01 96       	adiw	r24, 0x01	; 1
    2ec6:	0e 94 ac 09 	call	0x1358	; 0x1358 <IIC_voidReadDataNoAck>
	*Copy_u8Data=Local_u8Data;
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	ea 81       	ldd	r30, Y+2	; 0x02
    2ece:	fb 81       	ldd	r31, Y+3	; 0x03
    2ed0:	80 83       	st	Z, r24
	IIC_voidStopCondition();
    2ed2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <IIC_voidStopCondition>
		}
}
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	cf 91       	pop	r28
    2ee2:	df 91       	pop	r29
    2ee4:	08 95       	ret

00002ee6 <COOLING_ELEMENT_voidInit>:

#include"../../LIBRARY/stdTypes.h"
#include"../../MCAL/DIO/DIO_int.h"
#include "COOLING_ELEMENT_priv.h"
#include "COOLING_ELEMENT_conf.h"
void COOLING_ELEMENT_voidInit(void){
    2ee6:	df 93       	push	r29
    2ee8:	cf 93       	push	r28
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(COOLING_ELEMENT_GROUP,COOLING_ELEMENT_PIN,DIO_u8OUTPUT);
    2eee:	82 e0       	ldi	r24, 0x02	; 2
    2ef0:	64 e0       	ldi	r22, 0x04	; 4
    2ef2:	41 e0       	ldi	r20, 0x01	; 1
    2ef4:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_voidSetPinDirection>
}
    2ef8:	cf 91       	pop	r28
    2efa:	df 91       	pop	r29
    2efc:	08 95       	ret

00002efe <COOLING_ELEMENT_voidEnable>:
void COOLING_ELEMENT_voidEnable(void){
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	cd b7       	in	r28, 0x3d	; 61
    2f04:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(COOLING_ELEMENT_GROUP,COOLING_ELEMENT_PIN,DIO_u8HIGH);
    2f06:	82 e0       	ldi	r24, 0x02	; 2
    2f08:	64 e0       	ldi	r22, 0x04	; 4
    2f0a:	41 e0       	ldi	r20, 0x01	; 1
    2f0c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
}
    2f10:	cf 91       	pop	r28
    2f12:	df 91       	pop	r29
    2f14:	08 95       	ret

00002f16 <COOLING_ELEMENT_voidDisable>:
void COOLING_ELEMENT_voidDisable(void){
    2f16:	df 93       	push	r29
    2f18:	cf 93       	push	r28
    2f1a:	cd b7       	in	r28, 0x3d	; 61
    2f1c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(COOLING_ELEMENT_GROUP,COOLING_ELEMENT_PIN,DIO_u8LOW);
    2f1e:	82 e0       	ldi	r24, 0x02	; 2
    2f20:	64 e0       	ldi	r22, 0x04	; 4
    2f22:	40 e0       	ldi	r20, 0x00	; 0
    2f24:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>
}
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	08 95       	ret

00002f2e <BUTTON_voidInit>:
#include"../../MCAL/DIO/DIO_int.h"
#include "BUTTON_priv.h"
#include "BUTTON_conf.h"
#include <util/delay.h>

void BUTTON_voidInit(void){
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(BUTTON_ON_GROUP,BUTTON__ON_PIN,DIO_u8INPUT);
    2f36:	83 e0       	ldi	r24, 0x03	; 3
    2f38:	64 e0       	ldi	r22, 0x04	; 4
    2f3a:	40 e0       	ldi	r20, 0x00	; 0
    2f3c:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(BUTTON_ON_GROUP,BUTTON__ON_PIN,DIO_u8FLOAT);
    2f40:	83 e0       	ldi	r24, 0x03	; 3
    2f42:	64 e0       	ldi	r22, 0x04	; 4
    2f44:	40 e0       	ldi	r20, 0x00	; 0
    2f46:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(BUTTON_OFF_GROUP,BUTTON__OFF_PIN,DIO_u8INPUT);
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	62 e0       	ldi	r22, 0x02	; 2
    2f4e:	40 e0       	ldi	r20, 0x00	; 0
    2f50:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(BUTTON_OFF_GROUP,BUTTON__OFF_PIN,DIO_u8FLOAT);
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	62 e0       	ldi	r22, 0x02	; 2
    2f58:	40 e0       	ldi	r20, 0x00	; 0
    2f5a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(BUTTON_UP_GROUP,BUTTON__UP_PIN,DIO_u8INPUT);
    2f5e:	83 e0       	ldi	r24, 0x03	; 3
    2f60:	62 e0       	ldi	r22, 0x02	; 2
    2f62:	40 e0       	ldi	r20, 0x00	; 0
    2f64:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(BUTTON_UP_GROUP,BUTTON__UP_PIN,DIO_u8FLOAT);
    2f68:	83 e0       	ldi	r24, 0x03	; 3
    2f6a:	62 e0       	ldi	r22, 0x02	; 2
    2f6c:	40 e0       	ldi	r20, 0x00	; 0
    2f6e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(BUTTON_DOWN_GROUP,BUTTON__DOWN_PIN,DIO_u8INPUT);
    2f72:	83 e0       	ldi	r24, 0x03	; 3
    2f74:	63 e0       	ldi	r22, 0x03	; 3
    2f76:	40 e0       	ldi	r20, 0x00	; 0
    2f78:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(BUTTON_DOWN_GROUP,BUTTON__DOWN_PIN,DIO_u8FLOAT);
    2f7c:	83 e0       	ldi	r24, 0x03	; 3
    2f7e:	63 e0       	ldi	r22, 0x03	; 3
    2f80:	40 e0       	ldi	r20, 0x00	; 0
    2f82:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_voidSetPinValue>

	return;
}
    2f86:	cf 91       	pop	r28
    2f88:	df 91       	pop	r29
    2f8a:	08 95       	ret

00002f8c <BUTTON_ON_voidGetValue>:
void BUTTON_ON_voidGetValue(u8 * copy_u8Value){
    2f8c:	df 93       	push	r29
    2f8e:	cf 93       	push	r28
    2f90:	00 d0       	rcall	.+0      	; 0x2f92 <BUTTON_ON_voidGetValue+0x6>
    2f92:	0f 92       	push	r0
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	9b 83       	std	Y+3, r25	; 0x03
    2f9a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Value=0;
    2f9c:	19 82       	std	Y+1, r1	; 0x01
	DIO_voidGetPinValue(BUTTON_ON_GROUP,BUTTON__ON_PIN,&Local_u8Value);
    2f9e:	83 e0       	ldi	r24, 0x03	; 3
    2fa0:	64 e0       	ldi	r22, 0x04	; 4
    2fa2:	9e 01       	movw	r18, r28
    2fa4:	2f 5f       	subi	r18, 0xFF	; 255
    2fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa8:	a9 01       	movw	r20, r18
    2faa:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <DIO_voidGetPinValue>
	*copy_u8Value=Local_u8Value;
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	ea 81       	ldd	r30, Y+2	; 0x02
    2fb2:	fb 81       	ldd	r31, Y+3	; 0x03
    2fb4:	80 83       	st	Z, r24
}
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	cf 91       	pop	r28
    2fbe:	df 91       	pop	r29
    2fc0:	08 95       	ret

00002fc2 <BUTTON_OFF_voidGetValue>:
void BUTTON_OFF_voidGetValue(u8 * copy_u8Value){
    2fc2:	df 93       	push	r29
    2fc4:	cf 93       	push	r28
    2fc6:	00 d0       	rcall	.+0      	; 0x2fc8 <BUTTON_OFF_voidGetValue+0x6>
    2fc8:	0f 92       	push	r0
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	9b 83       	std	Y+3, r25	; 0x03
    2fd0:	8a 83       	std	Y+2, r24	; 0x02
	    u8 Local_u8Value=0;
    2fd2:	19 82       	std	Y+1, r1	; 0x01
		DIO_voidGetPinValue(BUTTON_OFF_GROUP,BUTTON__OFF_PIN,&Local_u8Value);
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	62 e0       	ldi	r22, 0x02	; 2
    2fd8:	9e 01       	movw	r18, r28
    2fda:	2f 5f       	subi	r18, 0xFF	; 255
    2fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fde:	a9 01       	movw	r20, r18
    2fe0:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <DIO_voidGetPinValue>
		*copy_u8Value=Local_u8Value;
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	ea 81       	ldd	r30, Y+2	; 0x02
    2fe8:	fb 81       	ldd	r31, Y+3	; 0x03
    2fea:	80 83       	st	Z, r24
}
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	cf 91       	pop	r28
    2ff4:	df 91       	pop	r29
    2ff6:	08 95       	ret

00002ff8 <main>:
u8 Initial_Temp=60;
u8 ON_Flag=0;
u8 First_Press=0; // for up and down buttons
u16 TEMPERATURE;
#include<util/delay.h>
int main(){
    2ff8:	df 93       	push	r29
    2ffa:	cf 93       	push	r28
    2ffc:	0f 92       	push	r0
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
	Initalization();
    3002:	0e 94 28 18 	call	0x3050	; 0x3050 <Initalization>
	EXTI_voidCallBack(Increase_TEMP,INT0);
    3006:	87 e2       	ldi	r24, 0x27	; 39
    3008:	99 e1       	ldi	r25, 0x19	; 25
    300a:	60 e0       	ldi	r22, 0x00	; 0
    300c:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <EXTI_voidCallBack>
	EXTI_voidCallBack(Decrease_TEMP,INT1);
    3010:	84 ec       	ldi	r24, 0xC4	; 196
    3012:	99 e1       	ldi	r25, 0x19	; 25
    3014:	61 e0       	ldi	r22, 0x01	; 1
    3016:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <EXTI_voidCallBack>
	EXTI_voidCallBack(Save_Data,INT2);
    301a:	81 e6       	ldi	r24, 0x61	; 97
    301c:	9a e1       	ldi	r25, 0x1A	; 26
    301e:	62 e0       	ldi	r22, 0x02	; 2
    3020:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <EXTI_voidCallBack>
	if(value!=0xFF){
		Initial_Temp=value;
	}
	*/
	while(1){
		BUTTON_ON_voidGetValue(&value);
    3024:	ce 01       	movw	r24, r28
    3026:	01 96       	adiw	r24, 0x01	; 1
    3028:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <BUTTON_ON_voidGetValue>
		if (value==PRESSED){
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	81 30       	cpi	r24, 0x01	; 1
    3030:	19 f4       	brne	.+6      	; 0x3038 <main+0x40>
			ON_Flag=1;
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	80 93 72 01 	sts	0x0172, r24
		}
		if(ON_Flag){
    3038:	80 91 72 01 	lds	r24, 0x0172
    303c:	88 23       	and	r24, r24
    303e:	29 f0       	breq	.+10     	; 0x304a <main+0x52>
		Sensor_Display();
    3040:	0e 94 50 18 	call	0x30a0	; 0x30a0 <Sensor_Display>
		System_Managment();
    3044:	0e 94 ee 18 	call	0x31dc	; 0x31dc <System_Managment>
    3048:	ed cf       	rjmp	.-38     	; 0x3024 <main+0x2c>
		}
		else{
			TURN_OFF();
    304a:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <TURN_OFF>
    304e:	ea cf       	rjmp	.-44     	; 0x3024 <main+0x2c>

00003050 <Initalization>:
		}
	}
}
void Initalization(void){
    3050:	df 93       	push	r29
    3052:	cf 93       	push	r28
    3054:	cd b7       	in	r28, 0x3d	; 61
    3056:	de b7       	in	r29, 0x3e	; 62
	GIE_voidEnable();
    3058:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GIE_voidEnable>
	EXTI_voidInit();
    305c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <EXTI_voidInit>
	LCD_voidInit();
    3060:	0e 94 bd 13 	call	0x277a	; 0x277a <LCD_voidInit>
	TEMP_SENSOR_voidInit();
    3064:	0e 94 34 11 	call	0x2268	; 0x2268 <TEMP_SENSOR_voidInit>
	BUTTON_voidInit();
    3068:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <BUTTON_voidInit>

	EEPROM_voidInit();
    306c:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <EEPROM_voidInit>
	HEATING_ELEMENT_voidInit();
    3070:	0e 94 f6 16 	call	0x2dec	; 0x2dec <HEATING_ELEMENT_voidInit>
	COOLING_ELEMENT_voidInit();
    3074:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <COOLING_ELEMENT_voidInit>
}
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	08 95       	ret

0000307e <LCD_Display>:
void LCD_Display(u8 Copy_u8Number){
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	0f 92       	push	r0
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
    3088:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidClearScreen();
    308a:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <LCD_voidClearScreen>
	LCD_voidWritInteger(Copy_u8Number);
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	88 2f       	mov	r24, r24
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <LCD_voidWritInteger>
}
    3098:	0f 90       	pop	r0
    309a:	cf 91       	pop	r28
    309c:	df 91       	pop	r29
    309e:	08 95       	ret

000030a0 <Sensor_Display>:
void Sensor_Display(void){
    30a0:	df 93       	push	r29
    30a2:	cf 93       	push	r28
    30a4:	cd b7       	in	r28, 0x3d	; 61
    30a6:	de b7       	in	r29, 0x3e	; 62
    30a8:	2e 97       	sbiw	r28, 0x0e	; 14
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	de bf       	out	0x3e, r29	; 62
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	cd bf       	out	0x3d, r28	; 61
	TEMPERATURE=TEMP_SENSOR_u16Read();
    30b4:	0e 94 43 11 	call	0x2286	; 0x2286 <TEMP_SENSOR_u16Read>
    30b8:	90 93 77 01 	sts	0x0177, r25
    30bc:	80 93 76 01 	sts	0x0176, r24
	LCD_Display(TEMPERATURE);
    30c0:	80 91 76 01 	lds	r24, 0x0176
    30c4:	90 91 77 01 	lds	r25, 0x0177
    30c8:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_Display>
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	aa ef       	ldi	r26, 0xFA	; 250
    30d2:	b4 e4       	ldi	r27, 0x44	; 68
    30d4:	8b 87       	std	Y+11, r24	; 0x0b
    30d6:	9c 87       	std	Y+12, r25	; 0x0c
    30d8:	ad 87       	std	Y+13, r26	; 0x0d
    30da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    30de:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	4a e7       	ldi	r20, 0x7A	; 122
    30ea:	55 e4       	ldi	r21, 0x45	; 69
    30ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	8f 83       	std	Y+7, r24	; 0x07
    30f6:	98 87       	std	Y+8, r25	; 0x08
    30f8:	a9 87       	std	Y+9, r26	; 0x09
    30fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30fc:	6f 81       	ldd	r22, Y+7	; 0x07
    30fe:	78 85       	ldd	r23, Y+8	; 0x08
    3100:	89 85       	ldd	r24, Y+9	; 0x09
    3102:	9a 85       	ldd	r25, Y+10	; 0x0a
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	40 e8       	ldi	r20, 0x80	; 128
    310a:	5f e3       	ldi	r21, 0x3F	; 63
    310c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3110:	88 23       	and	r24, r24
    3112:	2c f4       	brge	.+10     	; 0x311e <Sensor_Display+0x7e>
		__ticks = 1;
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	9e 83       	std	Y+6, r25	; 0x06
    311a:	8d 83       	std	Y+5, r24	; 0x05
    311c:	3f c0       	rjmp	.+126    	; 0x319c <Sensor_Display+0xfc>
	else if (__tmp > 65535)
    311e:	6f 81       	ldd	r22, Y+7	; 0x07
    3120:	78 85       	ldd	r23, Y+8	; 0x08
    3122:	89 85       	ldd	r24, Y+9	; 0x09
    3124:	9a 85       	ldd	r25, Y+10	; 0x0a
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	3f ef       	ldi	r19, 0xFF	; 255
    312a:	4f e7       	ldi	r20, 0x7F	; 127
    312c:	57 e4       	ldi	r21, 0x47	; 71
    312e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3132:	18 16       	cp	r1, r24
    3134:	4c f5       	brge	.+82     	; 0x3188 <Sensor_Display+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3136:	6b 85       	ldd	r22, Y+11	; 0x0b
    3138:	7c 85       	ldd	r23, Y+12	; 0x0c
    313a:	8d 85       	ldd	r24, Y+13	; 0x0d
    313c:	9e 85       	ldd	r25, Y+14	; 0x0e
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e2       	ldi	r20, 0x20	; 32
    3144:	51 e4       	ldi	r21, 0x41	; 65
    3146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	bc 01       	movw	r22, r24
    3150:	cd 01       	movw	r24, r26
    3152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	9e 83       	std	Y+6, r25	; 0x06
    315c:	8d 83       	std	Y+5, r24	; 0x05
    315e:	0f c0       	rjmp	.+30     	; 0x317e <Sensor_Display+0xde>
    3160:	80 e9       	ldi	r24, 0x90	; 144
    3162:	91 e0       	ldi	r25, 0x01	; 1
    3164:	9c 83       	std	Y+4, r25	; 0x04
    3166:	8b 83       	std	Y+3, r24	; 0x03
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
    316a:	9c 81       	ldd	r25, Y+4	; 0x04
    316c:	01 97       	sbiw	r24, 0x01	; 1
    316e:	f1 f7       	brne	.-4      	; 0x316c <Sensor_Display+0xcc>
    3170:	9c 83       	std	Y+4, r25	; 0x04
    3172:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3174:	8d 81       	ldd	r24, Y+5	; 0x05
    3176:	9e 81       	ldd	r25, Y+6	; 0x06
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	9e 83       	std	Y+6, r25	; 0x06
    317c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    317e:	8d 81       	ldd	r24, Y+5	; 0x05
    3180:	9e 81       	ldd	r25, Y+6	; 0x06
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	69 f7       	brne	.-38     	; 0x3160 <Sensor_Display+0xc0>
    3186:	14 c0       	rjmp	.+40     	; 0x31b0 <Sensor_Display+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3188:	6f 81       	ldd	r22, Y+7	; 0x07
    318a:	78 85       	ldd	r23, Y+8	; 0x08
    318c:	89 85       	ldd	r24, Y+9	; 0x09
    318e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	9e 83       	std	Y+6, r25	; 0x06
    319a:	8d 83       	std	Y+5, r24	; 0x05
    319c:	8d 81       	ldd	r24, Y+5	; 0x05
    319e:	9e 81       	ldd	r25, Y+6	; 0x06
    31a0:	9a 83       	std	Y+2, r25	; 0x02
    31a2:	89 83       	std	Y+1, r24	; 0x01
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	9a 81       	ldd	r25, Y+2	; 0x02
    31a8:	01 97       	sbiw	r24, 0x01	; 1
    31aa:	f1 f7       	brne	.-4      	; 0x31a8 <Sensor_Display+0x108>
    31ac:	9a 83       	std	Y+2, r25	; 0x02
    31ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
}
    31b0:	2e 96       	adiw	r28, 0x0e	; 14
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	de bf       	out	0x3e, r29	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	cd bf       	out	0x3d, r28	; 61
    31bc:	cf 91       	pop	r28
    31be:	df 91       	pop	r29
    31c0:	08 95       	ret

000031c2 <TURN_OFF>:
void TURN_OFF(void){
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
	HEATING_ELEMENT_voidDisable();
    31ca:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <HEATING_ELEMENT_voidDisable>
	COOLING_ELEMENT_voidDisable();
    31ce:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <COOLING_ELEMENT_voidDisable>
	LCD_voidClearScreen();
    31d2:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <LCD_voidClearScreen>

}
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <System_Managment>:
void System_Managment(void){
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
	if(TEMPERATURE<Initial_Temp-5){
    31e4:	80 91 68 01 	lds	r24, 0x0168
    31e8:	88 2f       	mov	r24, r24
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	05 97       	sbiw	r24, 0x05	; 5
    31ee:	9c 01       	movw	r18, r24
    31f0:	80 91 76 01 	lds	r24, 0x0176
    31f4:	90 91 77 01 	lds	r25, 0x0177
    31f8:	82 17       	cp	r24, r18
    31fa:	93 07       	cpc	r25, r19
    31fc:	28 f4       	brcc	.+10     	; 0x3208 <System_Managment+0x2c>
		HEATING_ELEMENT_voidEnable();
    31fe:	0e 94 02 17 	call	0x2e04	; 0x2e04 <HEATING_ELEMENT_voidEnable>
		COOLING_ELEMENT_voidDisable();
    3202:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <COOLING_ELEMENT_voidDisable>
    3206:	11 c0       	rjmp	.+34     	; 0x322a <System_Managment+0x4e>
	}
	else if(TEMPERATURE>Initial_Temp+5){
    3208:	80 91 68 01 	lds	r24, 0x0168
    320c:	88 2f       	mov	r24, r24
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	05 96       	adiw	r24, 0x05	; 5
    3212:	9c 01       	movw	r18, r24
    3214:	80 91 76 01 	lds	r24, 0x0176
    3218:	90 91 77 01 	lds	r25, 0x0177
    321c:	28 17       	cp	r18, r24
    321e:	39 07       	cpc	r19, r25
    3220:	20 f4       	brcc	.+8      	; 0x322a <System_Managment+0x4e>
		COOLING_ELEMENT_voidEnable();
    3222:	0e 94 7f 17 	call	0x2efe	; 0x2efe <COOLING_ELEMENT_voidEnable>
		HEATING_ELEMENT_voidDisable();
    3226:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <HEATING_ELEMENT_voidDisable>
	}
}
    322a:	cf 91       	pop	r28
    322c:	df 91       	pop	r29
    322e:	08 95       	ret

00003230 <Temperature_Setting_Mode>:
void Temperature_Setting_Mode(void){
    3230:	df 93       	push	r29
    3232:	cf 93       	push	r28
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
	if(First_Press==1){
    3238:	80 91 73 01 	lds	r24, 0x0173
    323c:	81 30       	cpi	r24, 0x01	; 1
    323e:	21 f4       	brne	.+8      	; 0x3248 <Temperature_Setting_Mode+0x18>
		LCD_Display(Initial_Temp);
    3240:	80 91 68 01 	lds	r24, 0x0168
    3244:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_Display>
	}
}
    3248:	cf 91       	pop	r28
    324a:	df 91       	pop	r29
    324c:	08 95       	ret

0000324e <Increase_TEMP>:
void Increase_TEMP(void){
    324e:	df 93       	push	r29
    3250:	cf 93       	push	r28
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	2e 97       	sbiw	r28, 0x0e	; 14
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	de bf       	out	0x3e, r29	; 62
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	cd bf       	out	0x3d, r28	; 61
	if(First_Press==1){
    3262:	80 91 73 01 	lds	r24, 0x0173
    3266:	81 30       	cpi	r24, 0x01	; 1
    3268:	09 f0       	breq	.+2      	; 0x326c <Increase_TEMP+0x1e>
    326a:	82 c0       	rjmp	.+260    	; 0x3370 <Increase_TEMP+0x122>
		if(Initial_Temp<=70){
    326c:	80 91 68 01 	lds	r24, 0x0168
    3270:	87 34       	cpi	r24, 0x47	; 71
    3272:	28 f4       	brcc	.+10     	; 0x327e <Increase_TEMP+0x30>
			Initial_Temp+=5;
    3274:	80 91 68 01 	lds	r24, 0x0168
    3278:	8b 5f       	subi	r24, 0xFB	; 251
    327a:	80 93 68 01 	sts	0x0168, r24
		}
		LCD_Display(Initial_Temp);
    327e:	80 91 68 01 	lds	r24, 0x0168
    3282:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_Display>
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	aa e7       	ldi	r26, 0x7A	; 122
    328c:	b4 e4       	ldi	r27, 0x44	; 68
    328e:	8b 87       	std	Y+11, r24	; 0x0b
    3290:	9c 87       	std	Y+12, r25	; 0x0c
    3292:	ad 87       	std	Y+13, r26	; 0x0d
    3294:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3296:	6b 85       	ldd	r22, Y+11	; 0x0b
    3298:	7c 85       	ldd	r23, Y+12	; 0x0c
    329a:	8d 85       	ldd	r24, Y+13	; 0x0d
    329c:	9e 85       	ldd	r25, Y+14	; 0x0e
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	4a e7       	ldi	r20, 0x7A	; 122
    32a4:	55 e4       	ldi	r21, 0x45	; 69
    32a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	8f 83       	std	Y+7, r24	; 0x07
    32b0:	98 87       	std	Y+8, r25	; 0x08
    32b2:	a9 87       	std	Y+9, r26	; 0x09
    32b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32b6:	6f 81       	ldd	r22, Y+7	; 0x07
    32b8:	78 85       	ldd	r23, Y+8	; 0x08
    32ba:	89 85       	ldd	r24, Y+9	; 0x09
    32bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	40 e8       	ldi	r20, 0x80	; 128
    32c4:	5f e3       	ldi	r21, 0x3F	; 63
    32c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32ca:	88 23       	and	r24, r24
    32cc:	2c f4       	brge	.+10     	; 0x32d8 <Increase_TEMP+0x8a>
		__ticks = 1;
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	9e 83       	std	Y+6, r25	; 0x06
    32d4:	8d 83       	std	Y+5, r24	; 0x05
    32d6:	3f c0       	rjmp	.+126    	; 0x3356 <Increase_TEMP+0x108>
	else if (__tmp > 65535)
    32d8:	6f 81       	ldd	r22, Y+7	; 0x07
    32da:	78 85       	ldd	r23, Y+8	; 0x08
    32dc:	89 85       	ldd	r24, Y+9	; 0x09
    32de:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	3f ef       	ldi	r19, 0xFF	; 255
    32e4:	4f e7       	ldi	r20, 0x7F	; 127
    32e6:	57 e4       	ldi	r21, 0x47	; 71
    32e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ec:	18 16       	cp	r1, r24
    32ee:	4c f5       	brge	.+82     	; 0x3342 <Increase_TEMP+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	40 e2       	ldi	r20, 0x20	; 32
    32fe:	51 e4       	ldi	r21, 0x41	; 65
    3300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	bc 01       	movw	r22, r24
    330a:	cd 01       	movw	r24, r26
    330c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	9e 83       	std	Y+6, r25	; 0x06
    3316:	8d 83       	std	Y+5, r24	; 0x05
    3318:	0f c0       	rjmp	.+30     	; 0x3338 <Increase_TEMP+0xea>
    331a:	80 e9       	ldi	r24, 0x90	; 144
    331c:	91 e0       	ldi	r25, 0x01	; 1
    331e:	9c 83       	std	Y+4, r25	; 0x04
    3320:	8b 83       	std	Y+3, r24	; 0x03
    3322:	8b 81       	ldd	r24, Y+3	; 0x03
    3324:	9c 81       	ldd	r25, Y+4	; 0x04
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	f1 f7       	brne	.-4      	; 0x3326 <Increase_TEMP+0xd8>
    332a:	9c 83       	std	Y+4, r25	; 0x04
    332c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332e:	8d 81       	ldd	r24, Y+5	; 0x05
    3330:	9e 81       	ldd	r25, Y+6	; 0x06
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	9e 83       	std	Y+6, r25	; 0x06
    3336:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3338:	8d 81       	ldd	r24, Y+5	; 0x05
    333a:	9e 81       	ldd	r25, Y+6	; 0x06
    333c:	00 97       	sbiw	r24, 0x00	; 0
    333e:	69 f7       	brne	.-38     	; 0x331a <Increase_TEMP+0xcc>
    3340:	14 c0       	rjmp	.+40     	; 0x336a <Increase_TEMP+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3342:	6f 81       	ldd	r22, Y+7	; 0x07
    3344:	78 85       	ldd	r23, Y+8	; 0x08
    3346:	89 85       	ldd	r24, Y+9	; 0x09
    3348:	9a 85       	ldd	r25, Y+10	; 0x0a
    334a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334e:	dc 01       	movw	r26, r24
    3350:	cb 01       	movw	r24, r22
    3352:	9e 83       	std	Y+6, r25	; 0x06
    3354:	8d 83       	std	Y+5, r24	; 0x05
    3356:	8d 81       	ldd	r24, Y+5	; 0x05
    3358:	9e 81       	ldd	r25, Y+6	; 0x06
    335a:	9a 83       	std	Y+2, r25	; 0x02
    335c:	89 83       	std	Y+1, r24	; 0x01
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	9a 81       	ldd	r25, Y+2	; 0x02
    3362:	01 97       	sbiw	r24, 0x01	; 1
    3364:	f1 f7       	brne	.-4      	; 0x3362 <Increase_TEMP+0x114>
    3366:	9a 83       	std	Y+2, r25	; 0x02
    3368:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		First_Press=0;
    336a:	10 92 73 01 	sts	0x0173, r1
    336e:	03 c0       	rjmp	.+6      	; 0x3376 <Increase_TEMP+0x128>
	}
	else{
		First_Press=1;
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	80 93 73 01 	sts	0x0173, r24
	}

}
    3376:	2e 96       	adiw	r28, 0x0e	; 14
    3378:	0f b6       	in	r0, 0x3f	; 63
    337a:	f8 94       	cli
    337c:	de bf       	out	0x3e, r29	; 62
    337e:	0f be       	out	0x3f, r0	; 63
    3380:	cd bf       	out	0x3d, r28	; 61
    3382:	cf 91       	pop	r28
    3384:	df 91       	pop	r29
    3386:	08 95       	ret

00003388 <Decrease_TEMP>:
void Decrease_TEMP(void){
    3388:	df 93       	push	r29
    338a:	cf 93       	push	r28
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
    3390:	2e 97       	sbiw	r28, 0x0e	; 14
    3392:	0f b6       	in	r0, 0x3f	; 63
    3394:	f8 94       	cli
    3396:	de bf       	out	0x3e, r29	; 62
    3398:	0f be       	out	0x3f, r0	; 63
    339a:	cd bf       	out	0x3d, r28	; 61
	if(First_Press==1){
    339c:	80 91 73 01 	lds	r24, 0x0173
    33a0:	81 30       	cpi	r24, 0x01	; 1
    33a2:	09 f0       	breq	.+2      	; 0x33a6 <Decrease_TEMP+0x1e>
    33a4:	82 c0       	rjmp	.+260    	; 0x34aa <Decrease_TEMP+0x122>
			if(Initial_Temp>=40){
    33a6:	80 91 68 01 	lds	r24, 0x0168
    33aa:	88 32       	cpi	r24, 0x28	; 40
    33ac:	28 f0       	brcs	.+10     	; 0x33b8 <Decrease_TEMP+0x30>
				Initial_Temp-=5;
    33ae:	80 91 68 01 	lds	r24, 0x0168
    33b2:	85 50       	subi	r24, 0x05	; 5
    33b4:	80 93 68 01 	sts	0x0168, r24
			}
			LCD_Display(Initial_Temp);
    33b8:	80 91 68 01 	lds	r24, 0x0168
    33bc:	0e 94 3f 18 	call	0x307e	; 0x307e <LCD_Display>
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	aa e7       	ldi	r26, 0x7A	; 122
    33c6:	b4 e4       	ldi	r27, 0x44	; 68
    33c8:	8b 87       	std	Y+11, r24	; 0x0b
    33ca:	9c 87       	std	Y+12, r25	; 0x0c
    33cc:	ad 87       	std	Y+13, r26	; 0x0d
    33ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	4a e7       	ldi	r20, 0x7A	; 122
    33de:	55 e4       	ldi	r21, 0x45	; 69
    33e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	8f 83       	std	Y+7, r24	; 0x07
    33ea:	98 87       	std	Y+8, r25	; 0x08
    33ec:	a9 87       	std	Y+9, r26	; 0x09
    33ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33f0:	6f 81       	ldd	r22, Y+7	; 0x07
    33f2:	78 85       	ldd	r23, Y+8	; 0x08
    33f4:	89 85       	ldd	r24, Y+9	; 0x09
    33f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e8       	ldi	r20, 0x80	; 128
    33fe:	5f e3       	ldi	r21, 0x3F	; 63
    3400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3404:	88 23       	and	r24, r24
    3406:	2c f4       	brge	.+10     	; 0x3412 <Decrease_TEMP+0x8a>
		__ticks = 1;
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	9e 83       	std	Y+6, r25	; 0x06
    340e:	8d 83       	std	Y+5, r24	; 0x05
    3410:	3f c0       	rjmp	.+126    	; 0x3490 <Decrease_TEMP+0x108>
	else if (__tmp > 65535)
    3412:	6f 81       	ldd	r22, Y+7	; 0x07
    3414:	78 85       	ldd	r23, Y+8	; 0x08
    3416:	89 85       	ldd	r24, Y+9	; 0x09
    3418:	9a 85       	ldd	r25, Y+10	; 0x0a
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	3f ef       	ldi	r19, 0xFF	; 255
    341e:	4f e7       	ldi	r20, 0x7F	; 127
    3420:	57 e4       	ldi	r21, 0x47	; 71
    3422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3426:	18 16       	cp	r1, r24
    3428:	4c f5       	brge	.+82     	; 0x347c <Decrease_TEMP+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342a:	6b 85       	ldd	r22, Y+11	; 0x0b
    342c:	7c 85       	ldd	r23, Y+12	; 0x0c
    342e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3430:	9e 85       	ldd	r25, Y+14	; 0x0e
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e2       	ldi	r20, 0x20	; 32
    3438:	51 e4       	ldi	r21, 0x41	; 65
    343a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	bc 01       	movw	r22, r24
    3444:	cd 01       	movw	r24, r26
    3446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	9e 83       	std	Y+6, r25	; 0x06
    3450:	8d 83       	std	Y+5, r24	; 0x05
    3452:	0f c0       	rjmp	.+30     	; 0x3472 <Decrease_TEMP+0xea>
    3454:	80 e9       	ldi	r24, 0x90	; 144
    3456:	91 e0       	ldi	r25, 0x01	; 1
    3458:	9c 83       	std	Y+4, r25	; 0x04
    345a:	8b 83       	std	Y+3, r24	; 0x03
    345c:	8b 81       	ldd	r24, Y+3	; 0x03
    345e:	9c 81       	ldd	r25, Y+4	; 0x04
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <Decrease_TEMP+0xd8>
    3464:	9c 83       	std	Y+4, r25	; 0x04
    3466:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3468:	8d 81       	ldd	r24, Y+5	; 0x05
    346a:	9e 81       	ldd	r25, Y+6	; 0x06
    346c:	01 97       	sbiw	r24, 0x01	; 1
    346e:	9e 83       	std	Y+6, r25	; 0x06
    3470:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3472:	8d 81       	ldd	r24, Y+5	; 0x05
    3474:	9e 81       	ldd	r25, Y+6	; 0x06
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	69 f7       	brne	.-38     	; 0x3454 <Decrease_TEMP+0xcc>
    347a:	14 c0       	rjmp	.+40     	; 0x34a4 <Decrease_TEMP+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347c:	6f 81       	ldd	r22, Y+7	; 0x07
    347e:	78 85       	ldd	r23, Y+8	; 0x08
    3480:	89 85       	ldd	r24, Y+9	; 0x09
    3482:	9a 85       	ldd	r25, Y+10	; 0x0a
    3484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	9e 83       	std	Y+6, r25	; 0x06
    348e:	8d 83       	std	Y+5, r24	; 0x05
    3490:	8d 81       	ldd	r24, Y+5	; 0x05
    3492:	9e 81       	ldd	r25, Y+6	; 0x06
    3494:	9a 83       	std	Y+2, r25	; 0x02
    3496:	89 83       	std	Y+1, r24	; 0x01
    3498:	89 81       	ldd	r24, Y+1	; 0x01
    349a:	9a 81       	ldd	r25, Y+2	; 0x02
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	f1 f7       	brne	.-4      	; 0x349c <Decrease_TEMP+0x114>
    34a0:	9a 83       	std	Y+2, r25	; 0x02
    34a2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			First_Press=0;
    34a4:	10 92 73 01 	sts	0x0173, r1
    34a8:	03 c0       	rjmp	.+6      	; 0x34b0 <Decrease_TEMP+0x128>
		}
		else{
			First_Press=1;
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	80 93 73 01 	sts	0x0173, r24
		}
}
    34b0:	2e 96       	adiw	r28, 0x0e	; 14
    34b2:	0f b6       	in	r0, 0x3f	; 63
    34b4:	f8 94       	cli
    34b6:	de bf       	out	0x3e, r29	; 62
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	cd bf       	out	0x3d, r28	; 61
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	08 95       	ret

000034c2 <Save_Data>:
void Save_Data(void){
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
	EEPROM_voidWrite(Initial_Temp,0,0);
    34ca:	80 91 68 01 	lds	r24, 0x0168
    34ce:	60 e0       	ldi	r22, 0x00	; 0
    34d0:	40 e0       	ldi	r20, 0x00	; 0
    34d2:	0e 94 23 17 	call	0x2e46	; 0x2e46 <EEPROM_voidWrite>
	ON_Flag=0;
    34d6:	10 92 72 01 	sts	0x0172, r1
}
    34da:	cf 91       	pop	r28
    34dc:	df 91       	pop	r29
    34de:	08 95       	ret

000034e0 <__mulsi3>:
    34e0:	62 9f       	mul	r22, r18
    34e2:	d0 01       	movw	r26, r0
    34e4:	73 9f       	mul	r23, r19
    34e6:	f0 01       	movw	r30, r0
    34e8:	82 9f       	mul	r24, r18
    34ea:	e0 0d       	add	r30, r0
    34ec:	f1 1d       	adc	r31, r1
    34ee:	64 9f       	mul	r22, r20
    34f0:	e0 0d       	add	r30, r0
    34f2:	f1 1d       	adc	r31, r1
    34f4:	92 9f       	mul	r25, r18
    34f6:	f0 0d       	add	r31, r0
    34f8:	83 9f       	mul	r24, r19
    34fa:	f0 0d       	add	r31, r0
    34fc:	74 9f       	mul	r23, r20
    34fe:	f0 0d       	add	r31, r0
    3500:	65 9f       	mul	r22, r21
    3502:	f0 0d       	add	r31, r0
    3504:	99 27       	eor	r25, r25
    3506:	72 9f       	mul	r23, r18
    3508:	b0 0d       	add	r27, r0
    350a:	e1 1d       	adc	r30, r1
    350c:	f9 1f       	adc	r31, r25
    350e:	63 9f       	mul	r22, r19
    3510:	b0 0d       	add	r27, r0
    3512:	e1 1d       	adc	r30, r1
    3514:	f9 1f       	adc	r31, r25
    3516:	bd 01       	movw	r22, r26
    3518:	cf 01       	movw	r24, r30
    351a:	11 24       	eor	r1, r1
    351c:	08 95       	ret

0000351e <__divmodhi4>:
    351e:	97 fb       	bst	r25, 7
    3520:	09 2e       	mov	r0, r25
    3522:	07 26       	eor	r0, r23
    3524:	0a d0       	rcall	.+20     	; 0x353a <__divmodhi4_neg1>
    3526:	77 fd       	sbrc	r23, 7
    3528:	04 d0       	rcall	.+8      	; 0x3532 <__divmodhi4_neg2>
    352a:	0c d0       	rcall	.+24     	; 0x3544 <__udivmodhi4>
    352c:	06 d0       	rcall	.+12     	; 0x353a <__divmodhi4_neg1>
    352e:	00 20       	and	r0, r0
    3530:	1a f4       	brpl	.+6      	; 0x3538 <__divmodhi4_exit>

00003532 <__divmodhi4_neg2>:
    3532:	70 95       	com	r23
    3534:	61 95       	neg	r22
    3536:	7f 4f       	sbci	r23, 0xFF	; 255

00003538 <__divmodhi4_exit>:
    3538:	08 95       	ret

0000353a <__divmodhi4_neg1>:
    353a:	f6 f7       	brtc	.-4      	; 0x3538 <__divmodhi4_exit>
    353c:	90 95       	com	r25
    353e:	81 95       	neg	r24
    3540:	9f 4f       	sbci	r25, 0xFF	; 255
    3542:	08 95       	ret

00003544 <__udivmodhi4>:
    3544:	aa 1b       	sub	r26, r26
    3546:	bb 1b       	sub	r27, r27
    3548:	51 e1       	ldi	r21, 0x11	; 17
    354a:	07 c0       	rjmp	.+14     	; 0x355a <__udivmodhi4_ep>

0000354c <__udivmodhi4_loop>:
    354c:	aa 1f       	adc	r26, r26
    354e:	bb 1f       	adc	r27, r27
    3550:	a6 17       	cp	r26, r22
    3552:	b7 07       	cpc	r27, r23
    3554:	10 f0       	brcs	.+4      	; 0x355a <__udivmodhi4_ep>
    3556:	a6 1b       	sub	r26, r22
    3558:	b7 0b       	sbc	r27, r23

0000355a <__udivmodhi4_ep>:
    355a:	88 1f       	adc	r24, r24
    355c:	99 1f       	adc	r25, r25
    355e:	5a 95       	dec	r21
    3560:	a9 f7       	brne	.-22     	; 0x354c <__udivmodhi4_loop>
    3562:	80 95       	com	r24
    3564:	90 95       	com	r25
    3566:	bc 01       	movw	r22, r24
    3568:	cd 01       	movw	r24, r26
    356a:	08 95       	ret

0000356c <__prologue_saves__>:
    356c:	2f 92       	push	r2
    356e:	3f 92       	push	r3
    3570:	4f 92       	push	r4
    3572:	5f 92       	push	r5
    3574:	6f 92       	push	r6
    3576:	7f 92       	push	r7
    3578:	8f 92       	push	r8
    357a:	9f 92       	push	r9
    357c:	af 92       	push	r10
    357e:	bf 92       	push	r11
    3580:	cf 92       	push	r12
    3582:	df 92       	push	r13
    3584:	ef 92       	push	r14
    3586:	ff 92       	push	r15
    3588:	0f 93       	push	r16
    358a:	1f 93       	push	r17
    358c:	cf 93       	push	r28
    358e:	df 93       	push	r29
    3590:	cd b7       	in	r28, 0x3d	; 61
    3592:	de b7       	in	r29, 0x3e	; 62
    3594:	ca 1b       	sub	r28, r26
    3596:	db 0b       	sbc	r29, r27
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	de bf       	out	0x3e, r29	; 62
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	cd bf       	out	0x3d, r28	; 61
    35a2:	09 94       	ijmp

000035a4 <__epilogue_restores__>:
    35a4:	2a 88       	ldd	r2, Y+18	; 0x12
    35a6:	39 88       	ldd	r3, Y+17	; 0x11
    35a8:	48 88       	ldd	r4, Y+16	; 0x10
    35aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    35ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    35ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    35b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    35b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    35b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    35b6:	b9 84       	ldd	r11, Y+9	; 0x09
    35b8:	c8 84       	ldd	r12, Y+8	; 0x08
    35ba:	df 80       	ldd	r13, Y+7	; 0x07
    35bc:	ee 80       	ldd	r14, Y+6	; 0x06
    35be:	fd 80       	ldd	r15, Y+5	; 0x05
    35c0:	0c 81       	ldd	r16, Y+4	; 0x04
    35c2:	1b 81       	ldd	r17, Y+3	; 0x03
    35c4:	aa 81       	ldd	r26, Y+2	; 0x02
    35c6:	b9 81       	ldd	r27, Y+1	; 0x01
    35c8:	ce 0f       	add	r28, r30
    35ca:	d1 1d       	adc	r29, r1
    35cc:	0f b6       	in	r0, 0x3f	; 63
    35ce:	f8 94       	cli
    35d0:	de bf       	out	0x3e, r29	; 62
    35d2:	0f be       	out	0x3f, r0	; 63
    35d4:	cd bf       	out	0x3d, r28	; 61
    35d6:	ed 01       	movw	r28, r26
    35d8:	08 95       	ret

000035da <_exit>:
    35da:	f8 94       	cli

000035dc <__stop_program>:
    35dc:	ff cf       	rjmp	.-2      	; 0x35dc <__stop_program>
